package com.parvanpajooh.agentmanagement.dao.jpa;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.OptimisticLockException;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.Metamodel;
import javax.validation.ConstraintViolationException;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.hibernate.StaleObjectStateException;

import com.parvanpajooh.agentmanagement.dao.AccountNumberDao;
import com.parvanpajooh.agentmanagement.dao.EmployeeDao;
import com.parvanpajooh.agentmanagement.dao.GeneralAgentDao;
import com.parvanpajooh.agentmanagement.model.AccountNumber;
import com.parvanpajooh.agentmanagement.model.Employee;
import com.parvanpajooh.agentmanagement.model.GeneralAgent;
import com.parvanpajooh.agentmanagement.model.GeneralAgent_;
import com.parvanpajooh.agentmanagement.model.criteria.AccountNumberCriteria;
import com.parvanpajooh.agentmanagement.model.criteria.EmployeeCriteria;
import com.parvanpajooh.agentmanagement.model.criteria.GeneralAgentCriteria;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.commons.platform.ejb.dao.jpa.GenericDaoJpa;
import com.parvanpajooh.commons.platform.ejb.exceptions.ObjectExistsException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanDaoException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanException;
import com.parvanpajooh.commons.platform.ejb.model.CurrentContext;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseCriteria;
import com.parvanpajooh.commons.util.DateUtil;
import com.parvanpajooh.commons.util.Validator;

/**
 * 
 * @author
 *
 */
@Stateless
public class GeneralAgentDaoJpa extends GenericDaoJpa<GeneralAgent, Long>implements GeneralAgentDao {

	public GeneralAgentDaoJpa() {
		super(GeneralAgent.class);
	}

	/**
	 * Entity manager, injected by Spring using @PersistenceContext annotation
	 * on setEntityManager()
	 */
	@PersistenceContext(unitName = PERSISTENCE_UNIT_NAME)
	private EntityManager entityManager;

	public EmployeeDao employeeDao;
	public AccountNumberDao accountNumberDao;

	@Inject
	public void setEmployeeDao(EmployeeDao employeeDao) {
		this.employeeDao = employeeDao;
	}

	@Inject
	public void setAccountNumberDao(AccountNumberDao accountNumberDao) {
		this.accountNumberDao = accountNumberDao;
	}

	@Override
	public GeneralAgent save(GeneralAgent generalAgent) throws ParvanDaoException {

		// LOG
		log.debug("Entering save( object={})", generalAgent);

		GeneralAgent entity = null;
		String accountNumber = null;

		try {

			Set<Employee> employeesSet = new HashSet<Employee>();
			List<AccountNumber> accountNumbers = new ArrayList<AccountNumber>();
			Set<Employee> employees = generalAgent.getEmployee();
			List<AccountNumber> accountNumberList = new ArrayList<AccountNumber>(generalAgent.getAccountNumber());

			if (Validator.isNotNull(accountNumberList)) {
				accountNumber = accountNumberList.get(0).getAccountNumber();
			}

			// save GeneralAgent
			generalAgent.setEmployee(null);
			generalAgent.setAccountNumber(null);
			entity = this.entityManager.merge(generalAgent);
			this.entityManager.flush();

			if (Validator.isNotNull(employees)) {

				// load Employee with generalAgentId
				EmployeeCriteria employeeCriteria = new EmployeeCriteria();
				GeneralAgentVO gAgent = new GeneralAgentVO();
				gAgent.setId(generalAgent.getId());
				employeeCriteria.setGeneralAgent(gAgent);
				List<Employee> employeeList = employeeDao.findByCriteria(employeeCriteria);
				for (Employee emp : employeeList) {
					employeeDao.delete(emp);
				}

				for (Employee object : employees) {

					// save Employee
					object.setGeneralAgent(entity);
					object = employeeDao.save(object);
					employeesSet.add(object);
				}
			}

			// save AccountNumber
			AccountNumberCriteria accountNumberCriteria = new AccountNumberCriteria();
			GeneralAgentVO gAgent = new GeneralAgentVO();
			gAgent.setId(generalAgent.getId());
			accountNumberCriteria.setGeneralAgent(gAgent);
			accountNumbers = accountNumberDao.findByCriteria(accountNumberCriteria);
			for (AccountNumber accnt : accountNumbers) {
				if (Validator.equals(accnt.getAccountNumber(), accountNumber)) {
					accountNumberDao.delete(accnt);
				} else {
					accnt.setActive(false);
					accountNumberDao.save(accnt);
				}
			}

			AccountNumber account = new AccountNumber();
			account.setAccountNumber(accountNumber);
			account.setActive(true);
			account.setGeneralAgent(entity);
			accountNumberDao.save(account);
			accountNumbers.add(account);

			// refresh GeneralAgent
			generalAgent.setEmployee(employeesSet);
			generalAgent.setAccountNumber(new HashSet<AccountNumber>(accountNumbers));
			entity = this.entityManager.merge(generalAgent);
			this.entityManager.flush();

		} catch (ConstraintViolationException e) {
			throw e;

		} catch (OptimisticLockException e) {
			if (e.getCause() != null && e.getCause() instanceof StaleObjectStateException) {
				throw (StaleObjectStateException) e.getCause();
			}

			throw e;

		} catch (Exception e) {

			Throwable cause = ExceptionUtils.getRootCause(e);

			if (cause != null && cause.getMessage() != null && cause.getMessage().indexOf("_UNIQUE") > -1) {
				throw new ObjectExistsException();
			}

			throw new ParvanDaoException("Error occurred while saving record.", e);
		}

		// LOG
		log.debug("Leaving exists(): {}", entity);

		return entity;
	}

	@Override
	protected List<Predicate> buildPredicateList(BaseCriteria cri, CriteriaBuilder builder, Metamodel metamodel, Root<GeneralAgent> root,
			Map<String, Join> joins) throws ParvanException {

		// LOG
		log.debug("Entering buildPredicateList( ... )");

		List<Predicate> predicateList = new ArrayList<Predicate>();

		GeneralAgentCriteria generalAgentCriteria = (GeneralAgentCriteria) cri;
		String canonicalSearchName = generalAgentCriteria.getCanonicalSearchName();

		// ----------------------------------------------------------------
		// canonicalSearchName
		// ----------------------------------------------------------------
		if (Validator.isNotNull(canonicalSearchName)) {
			List<Predicate> preList = new ArrayList<Predicate>();

			String[] splited = canonicalSearchName.trim().split("\\s+");

			for (String str : splited) {

				Predicate predicate = builder.or(builder.like(root.<String> get(GeneralAgent_.name), "%" + str + "%"),
						builder.like(root.<String> get(GeneralAgent_.tel), "%" + str + "%"),
						builder.like(root.<String> get(GeneralAgent_.email), "%" + str + "%"));
				preList.add(predicate);

			}
			predicateList.add(builder.and(preList.toArray(new Predicate[0])));
		}

		// LOG
		log.debug("Leaving buildPredicateList(): {}", predicateList.size());

		return predicateList;
	}

	protected void basePredicate(BaseCriteria cri, CriteriaBuilder builder, Root<GeneralAgent> root, List<Predicate> predicateList) {


		if (Validator.isNotNull(cri.getCreateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("createUserId"), cri.getCreateUserId());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("updateUserId"), cri.getUpdateUserId());
			predicateList.add(predicate);
		}

		// createDate
		if(Validator.isNotNull(cri.getCreateDateFrom())){
			LocalDateTime createDateTimeFrom = cri.getCreateDateFrom();
			createDateTimeFrom = createDateTimeFrom.withNano(0); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime>get("createDate"), createDateTimeFrom);
    		predicateList.add(predicate);
    	}
    	
    	if(Validator.isNotNull(cri.getCreateDateTo())){
			LocalDateTime createDateTimeTo = cri.getCreateDateTo();
    		createDateTimeTo = createDateTimeTo.withSecond(59); //TODO temporary solution due to ECD-1068
			createDateTimeTo = createDateTimeTo.withNano(999999999); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime>get("createDate"), createDateTimeTo);
    		predicateList.add(predicate);
    	}
    	
    	// updateDate
    	if(Validator.isNotNull(cri.getUpdateDateFrom())){
			LocalDateTime updateDateTimeFrom = cri.getUpdateDateFrom();
			updateDateTimeFrom = updateDateTimeFrom.withNano(0); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime>get("updateDate"), updateDateTimeFrom);
    		predicateList.add(predicate);
    	}
    	
    	if(Validator.isNotNull(cri.getUpdateDateTo())){
			LocalDateTime updateDateTimeTo = cri.getUpdateDateTo();
    		updateDateTimeTo = updateDateTimeTo.withSecond(59); //TODO temporary solution due to ECD-1068
			updateDateTimeTo = updateDateTimeTo.withNano(999999999); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime>get("updateDate"), updateDateTimeTo);
    		predicateList.add(predicate);
    	}
	}
}
