package com.parvanpajooh.issuemanager.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.issuemanager.common.exceptions.ParvanDaoException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanServiceException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.issuemanager.service.impl.GenericLocalServiceImpl;
import com.parvanpajooh.issuemanager.dao.CommentDao;
import com.parvanpajooh.issuemanager.model.Comment;
import com.parvanpajooh.issuemanager.model.vo.CommentVO;
import com.parvanpajooh.issuemanager.service.CommentLocalService;


/**
 * 
 * @author ali
 * @author mehrdad
 * 
 */
@Stateless
public class CommentLocalServiceImpl extends GenericLocalServiceImpl<Comment, Long>
		implements CommentLocalService {
	/**
	 * Log variable for all child classes.
	 */
	static final Logger log = LoggerFactory
			.getLogger(CommentLocalServiceImpl.class);

	public CommentDao commentDao;

	@Inject
	public void setCommentDao(CommentDao commentDao) {
		this.dao = commentDao;
		this.commentDao = commentDao;
	}


	@Override
	public List<CommentVO> loadCommentByTaskId(Long id)
			throws ParvanServiceException {
		List<CommentVO> result = null;

		try {
			List<Comment> comments = commentDao.findBytaskId(id);
			result = convertToTree(comments);
		} catch (Exception e) {
			log.error("error occurred while loadCommentByTaskId", e);
			throw new ParvanUnrecoverableException(
					"error occurred while loadCommentByTaskId", e);
		}

		return result;
		
	}

	@Override
	public void saveComment(String desc,Long taskAssignmentId) throws ParvanServiceException,
			ParvanDaoException {
		commentDao.saveComment(desc, taskAssignmentId);
	}
	
	
	/**
	 * 
	 * @param members
	 * @return
	 */
	private List<CommentVO> convertToTree(List<Comment> comments) {

		List<CommentVO> result = new ArrayList<CommentVO>();
		Map<Long, CommentVO> map = new HashMap<Long, CommentVO>();

		Iterator<Comment> iterator = comments.iterator();
		while (iterator.hasNext()) {
			Comment thisComment = iterator.next();
			CommentVO commentVO = thisComment.toVOLite();
			result.add(commentVO);
			map.put(thisComment.getId(), commentVO);
			iterator.remove();
		}

		return result;
	}
}
