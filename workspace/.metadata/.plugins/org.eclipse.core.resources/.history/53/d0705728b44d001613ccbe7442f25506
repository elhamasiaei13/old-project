package com.parvanpajooh.issuemanager.service.impl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.activation.MailcapCommandMap;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Schedule;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.Timer;
import javax.inject.Inject;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.common.util.Validator;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanDaoException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanServiceException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.issuemanager.common.exceptions.SendMail;
import com.parvanpajooh.issuemanager.dao.MemberDao;
import com.parvanpajooh.issuemanager.dao.TaskDao;
import com.parvanpajooh.issuemanager.dao.TaskMemberRelationDao;
import com.parvanpajooh.issuemanager.model.Member;
import com.parvanpajooh.issuemanager.model.Task;
import com.parvanpajooh.issuemanager.model.TaskMemberRelation;
import com.parvanpajooh.issuemanager.model.enums.EmailEnum;
import com.parvanpajooh.issuemanager.model.enums.TaskMemberRelationEnum;
import com.sun.mail.util.MailSSLSocketFactory;

@Singleton
@Lock(LockType.READ) // allows timers to execute in parallel
@Startup
public class TimingJob {
	/**
	 * Log variable for all child classes.
	 */
	private static final Logger log = LoggerFactory.getLogger(TimingJob.class);

	private static boolean SEND_EMAIL__IS_RUNNING = false;

	@Inject
	private TaskDao taskDao;

	@Inject
	private TaskMemberRelationDao taskMemberRelationDao;

	@Inject
	private MemberDao memberDao;

	public TimingJob() {
		log.debug("LostAndFound Job Created.");
	}

	@Schedule(minute = "*/10", hour = "*", info = "MANIFEST_INDEX", persistent = false)
	public void sendEmail(Timer timer) throws ParvanServiceException {
		log.debug("start running job indexManifest [{}]", LocalDateTime.now());
		List<Task> tasks = new ArrayList<Task>();

		try {
			if (SEND_EMAIL__IS_RUNNING) {
				log.debug("ignoring timer due to currently running job. [{}]");

			} else {
				try {
					// run job

					String baseContent = "\r\n جزییات بروزرسانی تسک در لینک زیر موجود می‌باشد :\r\n";
					String mailContent = null;

					SEND_EMAIL__IS_RUNNING = true;
					SendMail mail = new SendMail();
					List<String> mails = new ArrayList<>();
					List<String> contents = new ArrayList<>();
					tasks = taskDao.findByEmailStatus(EmailEnum.NEED);
					Member member = null;
					for (Task task : tasks) {
						mailContent = baseContent + "http://185.13.231.243/issuemanager-web/taskDetails/" + task.getId();
						member = task.getCurrentMember();
						String mailStr = memberDao.get(task.getId()).getEmail();
						List<TaskMemberRelation> taskMemberRelation = taskMemberRelationDao.findByTaskId(task.getId(), TaskMemberRelationEnum.WATCHING);
						for (TaskMemberRelation taskMembRelation : taskMemberRelation) {
							mails.add(memberDao.get(taskMembRelation.getMember().getId()).getEmail());
							contents.add(mailContent);
							mailContent = null;
						}
						if (Validator.isNotNull(member) && !mails.contains(mailStr)) {
							mails.add(mailStr);
							contents.add(mailContent);
						}
					}

					String[] mailList = new String[mails.size()];
					String[] contentList = new String[contents.size()];
					mailList = mails.toArray(mailList);
					contentList = contents.toArray(contentList);
					if (Validator.isNotNull(mailList)) {
						mail.send(mailList, contentList, "test1@mahmadar.com", "ismt150098", "mail.parvanpajooh.com", "587", "false", "true", "-");

						for (Task task : tasks) {
							task.setEmailStatus(EmailEnum.SENT);
							taskDao.save(task);
						}
					}

				} catch (ParvanDaoException | MessagingException e) {

					try {
						for (Task task : tasks) {
							task.setEmailStatus(EmailEnum.FAILD);
							taskDao.save(task);
						}
					} catch (ParvanDaoException e1) {
						throw new ParvanUnrecoverableException("Error occurred while saving object.", e1);
					}

					throw new ParvanUnrecoverableException("Error occurred while sending Email.", e);
				}
			}

		} finally {
			SEND_EMAIL__IS_RUNNING = false;
		}
	}
}