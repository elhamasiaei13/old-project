package com.parvanpajooh.sample.dao.jpa;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.Metamodel;

import com.parvanpajooh.common.exceptions.ParvanException;
import com.parvanpajooh.common.util.Validator;
import com.parvanpajooh.common.vo.BaseCriteria;
import com.parvanpajooh.ecourier.dao.jpa.GenericDaoJpa;
import com.parvanpajooh.sample.dao.SampleDao;
import com.parvanpajooh.sample.model.Sample;
import com.parvanpajooh.sample.model.Sample_;
import com.parvanpajooh.sample.model.criteria.SampleCriteria;

/**
 * 
 * @author ali
 *
 */
@Stateless
public class SampleDaoJpa extends GenericDaoJpa<Sample, Long> implements SampleDao {

	public SampleDaoJpa() {
		super(Sample.class);
	}
	
	@Override
	protected List<Predicate> buildPredicateList(
			BaseCriteria cri, 
			CriteriaBuilder builder, 
			Metamodel metamodel, 
			Root<Sample> root, Map<String, Join> joins) throws ParvanException {

		//LOG
    	log.debug("Entering buildPredicateList( ... )");
    	
    	SampleCriteria sampleCriteria = (SampleCriteria) cri;
    	
		List<Predicate> predicateList = new ArrayList<Predicate>();
		
		String title = sampleCriteria.getTitle();
		String link = sampleCriteria.getLink();
		Boolean active = sampleCriteria.getActive();
		List<String> roles = sampleCriteria.getRoles();
		Long parentId = sampleCriteria.getParentId();
		Long childrenId = sampleCriteria.getChildrenId();
		
		if(Validator.isNotNull( title )){
    		Predicate predicate = builder.like(root.<String>get(Sample_.title), "%" + title + "%");
    		predicateList.add(predicate);
    	}
		
		if(Validator.isNotNull( link )){
			Predicate predicate = builder.like(root.<String>get(Sample_.link), "%" + link + "%");
			predicateList.add(predicate);
		}
		
		if(Validator.isNotNull( active )){
			Predicate predicate = builder.equal(root.<Boolean>get(Sample_.active), active);
			predicateList.add(predicate);
		}

		//----------------------------------------------------------------
		// Sample roles
		//----------------------------------------------------------------
		if (Validator.isNotNull(roles)) {
			List<Predicate> orPredicates = new ArrayList<Predicate>();
			for (String thisRole : roles) {
				Predicate predicate = builder.like(root.<String> get(Sample_.roles), "%," + thisRole + ",%");
				orPredicates.add(predicate);
			}
			Predicate predicate = builder.or(orPredicates.toArray(new Predicate[orPredicates.size()]));
			predicateList.add(predicate);
		}
		
		if(Validator.isNotNull(parentId)){
    		Join<Sample, Sample> join = root.join(Sample_.parent, JoinType.LEFT);
    		
    		joins.put("parent", join);
    		
			Predicate predicate = builder.equal(join.<Long>get(Sample_.ID), parentId);
			predicateList.add(predicate);
		}
		
		if(Validator.isNotNull(childrenId)){
    		Join<Sample, Sample> join = root.join(Sample_.children, JoinType.LEFT);
    		
    		joins.put("children", join);
    		
			Predicate predicate = builder.equal(join.<Long>get(Sample_.ID), childrenId);
			predicateList.add(predicate);
		}
		
		basePredicate((BaseCriteria)sampleCriteria, builder, root, predicateList);
			
		//LOG
    	log.debug("Leaving buildPredicateList(): {}", predicateList.size());
    	
    	return predicateList;
	}
	
}
