package com.parvanpajooh.taskmanagement.rest;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.NoSuchMessageException;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.parvanpajooh.common.auth.BaseRestController;
import com.parvanpajooh.common.convertor.JacksonObjectMapperProvider;
import com.parvanpajooh.common.formatter.DateProperyEditor;
import com.parvanpajooh.commons.platform.ejb.exceptions.ErrorCode;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanRecoverableException;
import com.parvanpajooh.commons.util.StringUtil;

@RestController
@RequestMapping("/v1")
public class taskManagementRestController extends BaseRestController {

	protected transient final Logger log = LoggerFactory.getLogger(getClass());

	@Autowired
	private MessageSource messageSource;

	@Autowired
	protected JacksonObjectMapperProvider mapperProvider;

	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.registerCustomEditor(LocalDate.class, new DateProperyEditor(false, true));
		binder.registerCustomEditor(LocalDateTime.class, new DateProperyEditor(true, true));
	}

	@RequestMapping(value = "/hello", method = RequestMethod.GET)
	public void helloWord(HttpServletRequest request, @RequestHeader(value = "userName") String userName, @RequestHeader(value = "ip") String ip) {

		// LOG
		log.debug("Entering helloWord(userName={} , ip={} )", userName, ip);

	}

	/*private UserInfo loadUserInfo(HttpServletRequest request, String userName, String tenantId) throws Exception {
		UserVO userVO = userInfoApplicationService.loadUserByUsername(userName);

		if (userVO == null) {
			throw new ObjectNotFoundException("user is not valid");
		}

		if (!GetterUtil.getBoolean(userVO.isActive(), false)) {
			throw new DisabledException("user is not active");
		}

		Set<String> roleNames = new HashSet<String>();

		String ip = IpUtils.getIpFromRequest(request);

		String context = request.getContextPath();
		// String tenantId = TenantUtil.getTenantId(request);

		// userInfo
		UserInfo userInfo = JmUserInfo.getDefaultUserInfo(GetterUtil.getLong(userVO.getId()), GetterUtil.getString(userVO.getUserName()),
				GetterUtil.getString(userVO.getFirstName()), GetterUtil.getString(userVO.getLastName()), ip, context, tenantId, roleNames,
				GetterUtil.getString(userVO.getLocale()), GetterUtil.getString(userVO.getZoneId()), GetterUtil.getString(userVO.getCalendar()));

		return userInfo;
	}*/

	protected void proccessException(Exception e, Map<String, Object> result) {

		if (e instanceof ParvanRecoverableException) {
			ParvanRecoverableException recoverableException = (ParvanRecoverableException) e;

			Exception cause = (Exception) recoverableException.getCause();

			if (recoverableException.getErrorCode().equals(ErrorCode.DATA_IS_INVALID)) {
				String invalidField = null;
				if (cause != null && cause instanceof ConstraintViolationException) {
					invalidField = ((ConstraintViolationException) cause).getConstraintViolations().iterator().next().getPropertyPath().toString();

				} else {
					invalidField = recoverableException.getMessage();
				}
				result.put("invalidField", invalidField);
				result.put("status", "ValidationException");
			} else if (recoverableException.getErrorCode().equals(ErrorCode.OBJECT_EXIST)) {
				result.put("status", "ObjectExistsException");
			} else if (recoverableException.getErrorCode().equals(ErrorCode.DATA_DUPLICATE)) {
				result.put("status", "ErrorCode");
				result.put("errorCode", recoverableException.getErrorCode().toValue());
				result.put("errorField", recoverableException.getMessage());
				result.put("errorMessage", getMessage("error.data-duplicate", getMessage(recoverableException.getMessage(), (Object) null)));
			} else if (recoverableException.getErrorCode().equals(ErrorCode.FIELD_IS_EMPTY)) {
				result.put("status", "ErrorCode");
				result.put("errorCode", recoverableException.getErrorCode().toValue());
				result.put("errorField", recoverableException.getMessage());
				result.put("errorMessage", getMessage("error-required", getMessage(recoverableException.getMessage(), (Object) null)));
			} else if (recoverableException.getErrorCode().equals(ErrorCode.SHIPMENT_INVALID_STATE_TRANSITION)) {
				result.put("status", "ErrorCode");
				result.put("errorCode", recoverableException.getErrorCode().toValue());
				result.put("errorField", recoverableException.getMessage());
				result.put("errorMessage", getMessage("error-invalid-shipment-state",
						getMessage("trackstate." + StringUtil.upperCase(recoverableException.getMessage()), (Object) null)));
			} else {
				result.put("status", "ErrorCode");
				result.put("errorCode", recoverableException.getErrorCode().toValue());
				result.put("errorMessage", recoverableException.getMessage());
			}
		} else {
			log.error("error in proccessException", e);
			result.put("status", "fail");
		}
	}
}
