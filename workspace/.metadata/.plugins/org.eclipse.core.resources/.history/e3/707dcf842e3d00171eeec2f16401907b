<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org" xmlns:dt="http://github.com/dandelion/datatables" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorator="filter-layout"
	ddl:bundle-includes="bootstrapValidator,select2">

<head>
<title>Register</title>
</head>
<body>

	<section layout:fragment="top-header" class="page-header">
		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<ul class="breadcrumb">
						<li>
							<a href="#">صفحه نخست</a>
						</li>

						<li class="active">فعالسازی</li>
					</ul>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<h1>فعالسازی</h1>
				</div>
			</div>
		</div>
	</section>

	<section class="content" layout:fragment="content">
		<div class="container">
			<div class="panel panel-default">
				<div class="panel-body">
					<div id="" class="row">
						<div id="address" class="col-lg-12">
							<h2>فعالسازی</h2>

							<form name="trackForm" novalidate>
								<div class="form-group col-lg-12">
									<label class="text-muted">شماره بارنامه</label>
									<input id="trackValue" name="trackValue" data-ng-model="trackValue" type="text" class="form-control" placeholder="شماره بارنامه" required />
									<span style="color: red" ng-show="trackForm.trackValue.$dirty">
										<span ng-show="trackForm.trackValue.$error.required">لطفا «شماره بارنامه» را وارد کنید.</span>
								</div>
								<div class="form-group col-lg-12">
									<a ng-click="search()" class="btn btn-warning">جستجو</a>
								</div>
							</form>
						</div>


					</div>
					<!-- row -->
				</div>
			</div>
		</div>
	</section>


	<th:block layout:fragment="javascripts">


		<script th:inline="javascript">

			var titleModifyRelation = '<span class="label label-info"  th:remove="tag" th:text="#{relation.modify}">Modify Relation !</span>';
			
			var legalPrefix = [
				{id:'company', text: /*[[#{person.prefix.company}]]*/ 
				},
				{id:'institution', text: /*[[#{person.prefix.institution}]]*/ 
				},
				{id:'office', text: /*[[#{person.prefix.office}]]*/ 
				},
				{id:'organization', text: /*[[#{person.prefix.organization}]]*/ 
				},
				{id:'ministry', text: /*[[#{person.prefix.ministry}]]*/ 
				},
				{id:'representative', text: /*[[#{person.prefix.representative}]]*/ 
				},
				{id:'laboratory', text: /*[[#{person.prefix.laboratory}]]*/ 
				},
				{id:'hospital', text: /*[[#{person.prefix.hospital}]]*/ 
				},
				{id:'clinic', text: /*[[#{person.prefix.clinic}]]*/ 
				},
				{id:'union', text: /*[[#{person.prefix.union}]]*/ 
				},
				{id:'community', text: /*[[#{person.prefix.community}]]*/ 
				},
				{id:'garrison', text: /*[[#{person.prefix.garrison}]]*/ 
				},
				{id:'cooperative', text: /*[[#{person.prefix.cooperative}]]*/ 
				},
				{id:'bank', text: /*[[#{person.prefix.bank}]]*/ 
				}
			];
   			
			var currentPersonId = /*[[${person.id}]]*/;
			//var currentPersonUrl =

   	    	$('input[type=radio][name=type]').on('ifChanged', function() {
   	   	    	
   	    		if (this.checked) {
   	    			var $legalPersonFragment = $('#legalPersonFragment');
   	    			var $realPersonFragment = $('#realPersonFragment');
   	    			var $contactInfoFragment = $('#contactInfoFragment');
   	    			if (this.value == 'REAL') {
   	    				$("#legalPersonFragment :input").prop("disabled", true);
   	    				$("#realPersonFragment :input").prop("disabled", false);
   	    				$('#realPersonFragment').css('display','block');
   	    				$('#legalPersonFragment').css('display','none');
   	    				
   	    				$('#legalPersonFragment').find('[data-bv-field]').each(function() {
   	    					$legalPersonFragment.bootstrapValidator('removeField', this.name);
   	    				});
   	    				$('#realPersonFragment').find('[data-bv-field]').each(function() {
   	    					$realPersonFragment.bootstrapValidator('addField', this.name);
   	    				});
   	    				$contactInfoFragment.bootstrapValidator('destroy');
   	    				$contactInfoFragment.bootstrapValidator({
	   						excluded: [':disabled'], 
	   						feedbackIcons:{valid: 'fa fa-check',invalid: 'fa fa-times',validating: 'fa fa-refresh'}
   						});
 	    				$contactInfoFragment.bootstrapValidator('addField', $('#createPersonForm').find('#mobile'));
 	    				$contactInfoFragment.bootstrapValidator('removeField', $('#createPersonForm').find('#postalCode'));
   	    				resetLegalPersonFragment($legalPersonFragment);
   	    				$('#mobileLabel span').remove();
   	    				$('#mobileLabel').append('<span class="reqired"> *</span>');
   	    				$('#postalCodeLabel span').remove();
   	    				
   	    			} else if (this.value == 'LEGAL') {
   	    				$("#legalPersonFragment :input").prop("disabled", false);
   	    				$("#realPersonFragment :input").prop("disabled", true);
   	    				$('#realPersonFragment').css('display','none');
   	    				$('#legalPersonFragment').css('display','block');
   	    				$('#realPersonFragment').find('[data-bv-field]').each(function() {
   	    					$realPersonFragment.bootstrapValidator('removeField', this.name);
   	    				});
   	    				$('#legalPersonFragment').find('[data-bv-field]').each(function() {
   	    					$legalPersonFragment.bootstrapValidator('addField', this.name);
   	    				});
   	    				$contactInfoFragment.bootstrapValidator('destroy');
   	    				$contactInfoFragment.bootstrapValidator({
	   						excluded: [':disabled'], 
	   						feedbackIcons:{valid: 'fa fa-check',invalid: 'fa fa-times',validating: 'fa fa-refresh'}
   						});
   	    				$contactInfoFragment.bootstrapValidator('removeField', $('#createPersonForm').find('#mobile'));
   	    				$contactInfoFragment.bootstrapValidator('addField', $('#createPersonForm').find('#postalCode'));
   	    				resetRealPersonFragment($realPersonFragment);
   	    				$('#postalCodeLabel span').remove();
   	    				$('#postalCodeLabel').append('<span class="reqired"> *</span>');
   	    				$('#mobileLabel span').remove();
   	    			}
   	    		}
   	    	});

		    $(document).ready(function() {

		    	$('input[name="type"][value="REAL"]').iCheck('check').iCheck('enable').trigger('ifChanged');
		    	 
				$('#legalPersonFragment ,#realPersonFragment ,#contactInfoFragment').bootstrapValidator({
					excluded: [':disabled'], 
					feedbackIcons:{
						valid: 'fa fa-check',
						invalid: 'fa fa-times',
						validating: 'fa fa-refresh'
					}
				});
		    	
		    	$('#legalPersonPrefix').select2({
		    		id: function(obj) { return obj.text; },
		    		placeholder: [[#{choose}]],
		    		allowClear: true,
		    		data: legalPrefix,
		    	    formatSelection: function(item){return item.text },
		    	    formatResult: function(item){return item.text },
		    	    initSelection: function (element, callback) {
		    	        var data = {id: element.val(), text: element.val()};
		    	        callback(data);
		    	    }
		    	}).change(function() {
					$('#legalPersonFragment').data('bootstrapValidator').updateStatus('prefix', 'NOT_VALIDATED', null).validateField('prefix');
				});

		    	$('#gender').select2({
	    			placeholder: [[#{choose}]]
	    			,allowClear: true,
	    			
    			});

		    	/*<![CDATA[*/
		    	$('#primaryContactInfoCityCode').select2({
	    				placeholder: [[#{choose}]]
	    				,formatResult: geoEntityFormat
	    				,id: function(obj) { return obj.shortCode; }
	    				,formatSelection: geoEntityFormat
	    				,initSelection: geoEntityInitSelection
	    				,allowClear: true
	    				,ajax: {
	    				     url: '/siteservices-web/profile/register/cities',
	    					 transport: transportFunction,
	    					 dataType: 'json',
	    					 params: {contentType: 'application/json;charset=utf-8', statusCode: {404: function(){showError('404');},403: function(){showError('403');},503: function(){showError('503');}}},
	    					 quietMillis: 200,
	    					 data: function (term, page) {
	    					 	return {
					    				'columns[1][data]': 'id'
					    				,start: (page - 1) * 20
					    				,length: 20
					    				,'order[1][column]': 1
					    				,'order[1][dir]': 'asc'
					    				,term: term
	    					 	};
	    					 },
	    					 results: function (data, page) {
	    					 	var more = (page * 20) < data.recordsFiltered;
	    					 	return {results: data.data, more: more}
	    					 }
	    				}
  				}).change(function() {
					$('#contactInfoFragment').data('bootstrapValidator').updateStatus('primaryContactInfo.cityCode', 'NOT_VALIDATED', null).validateField('primaryContactInfo.cityCode');
				});

		    	$('#createPersonBtn').click(function(){
		    		var $btn = $(this);
		    		var isValidForm = false;
		    		var isContactInfosValid = false;
		    		var $legalPersonFragment = $('#legalPersonFragment');
	                var $realPersonFragment = $('#realPersonFragment');
	                var $contactInfoFragment = $('#contactInfoFragment');
		    		$('#createPersonForm').find('.callout').text('').addClass('hide');
    				$('#contactInfoFragment').data('bootstrapValidator').validate();
    				isContactInfosValid = $('#contactInfoFragment').data('bootstrapValidator').isValid();
    				
		    		if($('input[name="type"][value="REAL"]').is(":checked")){
		    			$('#realPersonFragment').data('bootstrapValidator').validate();
		    			isValidForm = isContactInfosValid ? $('#realPersonFragment').data('bootstrapValidator').isValid() : false;
					}else if($('input[name="type"][value="LEGAL"]').is(":checked")){
						$('#legalPersonFragment').data('bootstrapValidator').validate();
						isValidForm = isContactInfosValid ? $('#legalPersonFragment').data('bootstrapValidator').isValid() : false;
					}
					if(isValidForm){ 
		    			$btn.attr('disabled', true);
			    		$.post('/siteservices-web/profile/register/save', $('#createPersonForm').serialize()).done(function(data) {
			    			if(data.status == 'success') {
			    				showTopleftGrowl('success', 'Create', 'Create Successful');
			                    resetContactInfoFragment($contactInfoFragment);
			                    resetRealPersonFragment($realPersonFragment);
			                    resetLegalPersonFragment($legalPersonFragment);
			                    $contactInfoFragment.bootstrapValidator('destroy');
			                    $realPersonFragment.bootstrapValidator('destroy');
			                    $legalPersonFragment.bootstrapValidator('destroy');
			                    $('#legalPersonFragment ,#realPersonFragment ,#contactInfoFragment').bootstrapValidator({
			                        excluded: [':disabled'],
			                        feedbackIcons: {
			                            valid: 'fa fa-check',
			                            invalid: 'fa fa-times',
			                            validating: 'fa fa-refresh'
			                        }
			                    });   
			                    $('input[name="type"][value="REAL"]').iCheck('check').iCheck('enable').trigger('ifChanged');
			    			} else if(data.status == 'ValidationException'){
			    				showTopleftGrowl('error', 'Error', data.invalidField);
			    				$('#createPersonForm').find('.callout').text(data.invalidField + 'invalid-value').removeClass('hide');
			    			} else if(data.status == 'ErrorCode'){
			    				if(data.errorMessage){
			    					showTopleftGrowl('error', 'Error', data.errorMessage);
			    					$('#createPersonForm').find('.callout').text(data.errorMessage).removeClass('hide');
			    				} else {
			    					showTopleftGrowl('error', 'Error', data.errorCode);
			    					$('#createPersonForm').find('.callout').text(messages[data.errorCode]).removeClass('hide');
			    				}
			    			} else {
			    				console.debug(data.status);
			    				showTopleftGrowl('error', 'Error', data.message);
			    				$('#createPersonForm').find('.callout').text((data.message ? data.message : 'delete.failed' )).removeClass('hide');
			    			}
			    			$btn.attr('disabled', false);
			    		}).fail(function( jqXHR, textStatus, errorThrown ){failAjax(jqXHR, textStatus, errorThrown, 'createPersonBtn')});
					} 
			    		return false;
		    	});
		    });

   	    	function resetContactInfoFragment($contactInfoFragment) {
   	    		$contactInfoFragment.find('input,select, textarea').val('');
   	    		try{$('#primaryContactInfoCityCode').select2('val', '');}catch(Erro){}
   			}
   			
   	    	function resetRealPersonFragment($realPersonFragment) {
   			    $realPersonFragment.find('input:text,select, textarea').val('');
   			    $realPersonFragment.find('input:radio, input:checkbox').iCheck('uncheck');
   			 	try{$('#gender').select2('val', '');}catch(Erro){}
   			}

   	    	function resetLegalPersonFragment($legalPersonFragment) {
   			    $legalPersonFragment.find('input:text,select, textarea').val('');
   			    $legalPersonFragment.find('input:radio, input:checkbox').iCheck('uncheck');
   			 	try{$('#legalPersonPrefix').select2('val', '');}catch(Erro){}
   			}
		    
		    function personInitSelection(element, callback) {
	    		var id = $(element).val();
	    		$.ajax({
	    			url : '/siteservices-web/person/get', 
	    			data : {id : id}, 
	    			dataType: 'json'
	    		}).done(function(data) {callback(data);});
	    	}

	    	function personFormat(aaData) {
	    		return aaData.fullNameLocal; 
	    	}

	    	function ajaxResult(data, page) {
				var more = (page * 20) < data.recordsFiltered;
				$.each(data.data, function(i,obj) {
					if (/* currentPersonId == obj.id ||  */!obj.active) {
						obj.disabled = true;
						return;
					}
				});
				return {results: data.data, more: more};
			}

	    	function geoEntityFormat(aaData) {
	    		var res = '<strong>' + aaData.nameFa + '</strong>';
	    		var resAdditional = '';
	    		if(aaData.parent){
	    			resAdditional = aaData.parent.nameFa + ' , ';
	    			
	    			if(aaData.parent.parent){
	    				resAdditional = aaData.parent.parent.nameFa + ' , ' + resAdditional;
	    			}
	    			
	    			res = '<span style="color: #999;">' + resAdditional + '</span>' + res;
	    		}
	    		return res; 
	    	}

		    function geoEntityInitSelection(element, callback) {
	    		var id = $(element).val();
	    		$.ajax({
	    			url : '/siteservices-web/profile/register/cities/' + id, 
	    			dataType: 'json'
	    		}).done(function(data) {callback(data);});
	    	}
			
	    	/*]]>*/
    		</script>

	</th:block>

</body>
</html>
