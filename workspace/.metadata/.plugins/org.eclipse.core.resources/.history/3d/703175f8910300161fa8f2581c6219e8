package all_sys;


import security.business.ISecurity;
import security.record.RLogin;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpSession;
import javax.servlet.ServletException;
import javax.servlet.RequestDispatcher;
import java.io.*;
import java.net.URLEncoder;
import java.util.Date;

import message.business.IMessage;
import look_up.business.ILookUp;

public class ServletRoot extends HttpServlet {
    protected static int DEFAULT_PAGE_RECORDS = 10;
    protected static int DEFAULT_REPORT_PAGE_RECORDS = 50;
    public static String UPLOAD_PATH = null;
    public static Date START_TIME = null;
    private final String REFERER_LOG_FILE = "/usr/local/tomcat5.5/logs/tech_info_password.log.txt";

    private void setNewMessage(HttpServletRequest request){
        request.setAttribute("new_messages", IMessage.getNewMessageCount(ISecurity.getLogginedUserObject(request).getUsername()));
    }

    public void init() throws ServletException {
        if (START_TIME == null) START_TIME = new Date();
        String mainPath = getServletContext().getRealPath("");
        int lastOccurence = mainPath.lastIndexOf("/");
        if(lastOccurence < 0)
            lastOccurence = mainPath.lastIndexOf("\\");
        UPLOAD_PATH = mainPath.substring(0, lastOccurence) + "/" + Paths.UPLOAD_FOLDER_NAME;
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String val = super.getInitParameter("requiredLogin");
        if((val == null || !val.equals("false")) && !this.checkLogin(request, response)){
            return;
        }
        request.setAttribute("password_age", request.getSession().getAttribute("password_age"));

        this.getRequest(request, response);
    }

    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String val = super.getInitParameter("requiredLogin");
        if((val == null || !val.equals("false")) && !this.checkLogin(request, response)){
            return;
        }
        response.setHeader( "Cache-Control" , "no-cache");
        request.setAttribute("password_age", request.getSession().getAttribute("password_age"));

        
        this.getRequest(request, response);
    }

    protected boolean checkLogin(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        boolean result = false;
        request.setCharacterEncoding("UTF-8");
        String val = super.getInitParameter("requiredLogin");

        if(val == null || !val.equals("false")){
            String qs = (request.getQueryString() != null ? "?" + request.getQueryString() : "");
            RLogin rLogin = ISecurity.isLogin(request);
            if (rLogin == null) {
                String username = request.getParameter("username");
                String login_id = request.getParameter("login_id");
                String office_id = request.getParameter("office_id");
                String redirect =  URLEncoder.encode(request.getRequestURL() + qs, "UTF-8");
                if (redirect.contains("username") && (redirect.contains("login_id") || redirect.contains("office_id")))
                    redirect = redirect.substring(0,redirect.indexOf("username")-3);

                String redirectUrl = Paths.APP_CONTEXT + "/login?username="+username+"&login_id="+login_id+"&office_id="
                        +office_id+"&redirect=" + redirect;
                this.redirectTo(response, redirectUrl);
            } else {
                if (!rLogin.getUsername().equals("rootuser") && !ISecurity.checkPermission(request)) {
                    this.forwardTo(request, response, Paths.SYSTEM_PREFIX + "/security/forbidden.jsp");
                }
                else {
                    setNewMessage(request);
                    request.setCharacterEncoding("UTF-8");
                    result = true;
                }
                // log(request);
            }
        }
        else{
            setNewMessage(request);
            request.setCharacterEncoding("UTF-8");
            result = true;
        }
        return result;
    }

    protected synchronized void getRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        request.getSession(true);
        request.setAttribute("currentDateInHeader", Functions.getShamsiDateForHeader(new Date()));
    }

    protected void forwardTo(HttpServletRequest request, HttpServletResponse response, String path) {
        RequestDispatcher requestDispatcher = request.getRequestDispatcher(path);
        try {
            requestDispatcher.forward(request, response);
        } catch (ServletException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    protected void redirectTo(HttpServletResponse response, String path) {
        try {
            response.sendRedirect(path);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    protected HttpSession getSession(HttpServletRequest request) {
        HttpSession session = request.getSession();
        if(session == null)
            session = request.getSession(true);
        return session;
    }

    protected void logPasswordVisit(String loginnedUsername, String username, String ipAddress) {
        String date = new Date().toString();
        if (loginnedUsername == null || date == null)
            return;
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(REFERER_LOG_FILE, true));
            out.write(date); out.write("|");
            out.write(loginnedUsername); out.write("|");
            out.write(ipAddress); out.write("|");
            out.write(username); out.write("|");
            out.write("\n");
            out.close();
        } catch (IOException e) {
        }
    }

}
