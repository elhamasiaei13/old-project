package com.parvanpajooh.siteservices.service.impl;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.client.common.PageList;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.commons.platform.ejb.model.CurrentContext;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.siteservices.model.vo.ComplaintCategoryVO;
import com.parvanpajooh.siteservices.model.vo.ComplaintVO;
import com.parvanpajooh.siteservices.model.vo.UserVO;
import com.parvanpajooh.siteservices.service.ComplaintManagementLocalService;
import com.parvanpajooh.siteservices.service.adapter.ComplaintManagementServiceAdapter;
import com.parvanpajooh.siteservices.service.adapter.IdentityManagement2ServiceAdapter;

/**
 * @author dev-03
 *
 */
@Stateless
public class ComplaintManagementLocalServiceImpl implements ComplaintManagementLocalService {

	/**
	 * Log variable for all child classes.
	 */
	static final Logger log = LoggerFactory.getLogger(ComplaintManagementLocalServiceImpl.class);

	@Inject
	private ComplaintManagementServiceAdapter complaintManagementServiceAdapter;
	
	@Inject
	private IdentityManagement2ServiceAdapter identityManagement2ServiceAdapter;


	@Override
	public ComplaintCategoryVO getComplaintCategory(Long id) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering getComplaintCategory(id={})", id);
		return complaintManagementServiceAdapter.getComplaintCategory(id);
	}

	@Override
	public PageList<ComplaintCategoryVO> findComplaintCategoriesBy(String term, int page, int size) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering findComplaintCategoriesBy(term={} , page={},size={})", term, page, size);
		return complaintManagementServiceAdapter.findComplaintCategoriesBy(term, page, size);
	}

	@Override
	public void saveComplaint(ComplaintVO complaintVO) throws ParvanServiceException {

		// LOG
		log.debug("Entering saveComplaint(complaintVO={})", complaintVO);
		
		
		try {
			//get user info from current context
			UserInfo userInfo = CurrentContext.getCurrentUserInfo().get();
			
			UserVO userVO = identityManagement2ServiceAdapter.findUserByUserName(userInfo.getUserName());
			
			complaintVO.setFirstName(userVO.getFirstName());
			complaintVO.setLastName(userVO.getLastName());
			complaintManagementServiceAdapter.saveComplaint(complaintVO);

		} catch (ParvanServiceException e) {
			throw new ParvanUnrecoverableException("Error occurred while saveComplaint in siteservices", e);
		}
	}

	@Override
	public PageList<ComplaintVO> findMyComplaintsBy(String term, int page, int size, SortDirectionEnum sortDirection, String sortCriterion)
			throws ParvanServiceException {
		
		// LOG
		log.debug("Entering findMyComplaintsBy(term={} , page={},size={})", term, page, size);
		return complaintManagementServiceAdapter.findMyComplaintsBy(term,page, size, sortDirection, sortCriterion);
		
	}
}
