package com.parvanpajooh.issuemanager.mvc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.parvanpajooh.common.UserInfo;
import com.parvanpajooh.common.vo.BaseVO;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanDaoException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanServiceException;
import com.parvanpajooh.issuemanager.model.enums.TaskStatusEnum;
import com.parvanpajooh.issuemanager.model.vo.TaskAssignmentVO;
import com.parvanpajooh.issuemanager.model.vo.TaskVO;
import com.parvanpajooh.issuemanager.service.CommentService;
import com.parvanpajooh.issuemanager.service.MemberService;
import com.parvanpajooh.issuemanager.service.TaskAssignmentService;
import com.parvanpajooh.issuemanager.service.TaskService;
import com.parvanpajooh.issuemanager.service.TypeService;


@Controller
@RequestMapping("/")
public class TaskAssignmentController extends BaseController {

	@EJB(mappedName = "java:global/issuemanager-ear/issuemanager-ejb/TaskAssignmentServiceImpl")
	private TaskAssignmentService taskAssignmentService;

	@EJB(mappedName = "java:global/issuemanager-ear/issuemanager-ejb/TypeServiceImpl")
	private TypeService typeService;

	@EJB(mappedName = "java:global/issuemanager-ear/issuemanager-ejb/CommentServiceImpl")
	private CommentService commentService;

	@EJB(mappedName = "java:global/issuemanager-ear/issuemanager-ejb/MemberServiceImpl")
	private MemberService memberService;

	@EJB(mappedName = "java:global/issuemanager-ear/issuemanager-ejb/TaskServiceImpl")
	private TaskService taskService;


	@RequestMapping(value = "/showAssignments", method = RequestMethod.GET)
	public String showAssignments(Model model) throws ParvanServiceException {

		UserInfo userInfo = new UserInfo(1L, "userName", "firstName", "lastName", "ip", "context", 1L, null, null, null, null, true, false);
		List<BaseVO> taskAssignmentsVO = taskAssignmentService.findAll(userInfo);
		model.addAttribute("taskAssignments", taskAssignmentsVO);
		return "showAssignments";
	}

	@RequestMapping(value = "/taskAssignment/save", method = { RequestMethod.POST, RequestMethod.GET })
	public String saveTaskAssignment(final HttpServletRequest request, Model model, TaskAssignmentVO taskAssignmentVO) throws ParvanServiceException,
			ParvanDaoException {

		Map<String, Object> result = new HashMap<String, Object>();
		UserInfo userInfo = new UserInfo(1L, "userName", "firstName", "lastName", "ip", "context", 1L, null, null, null, null, true, false);
		String taskId = request.getParameter("taskId");
		List<Long> ids = new ArrayList<Long>();
		ids.add(Long.parseLong(taskId));
		TaskVO taskVO = (TaskVO) taskService.findByIds(userInfo, ids).get(0);

//		model.addAttribute("status", typeService.findByTitle("taskStatus"));
		model.addAttribute("members", memberService.findAll(userInfo));
		try {

				TaskAssignmentVO assignmentVO =taskAssignmentService.editTaskAssignment(taskAssignmentVO, userInfo);
				taskVO.setTaskAssignmentId(assignmentVO);
				taskService.editTask(userInfo, taskVO);


		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
			return "assignTo";
		}

		return "redirect:/taskDetails/"+taskId+"?success=true";
	}

	@RequestMapping(value = "/taskAssignment/edit", method = { RequestMethod.POST, RequestMethod.GET })
	public String editTaskAssignment(final HttpServletRequest request) throws ParvanServiceException, ParvanDaoException {

		UserInfo userInfo = new UserInfo(1L, "userName", "firstName", "lastName", "ip", "context", 1L, null, null, null, null, true, false);
		TaskAssignmentVO taskAssignmentVO = new TaskAssignmentVO();
		Long taskAssignmentId = Long.parseLong(request.getParameter("taskAssignmentId"));
		String statusId = request.getParameter("statusName");
		taskAssignmentVO.setId(taskAssignmentId);
		taskAssignmentService.editTaskAssignment(taskAssignmentVO, userInfo);
		return "redirect:/showAssignments";
	}


	@RequestMapping(value = "/assignTo/{id}", method = RequestMethod.GET)
	public String showAssignTo(@PathVariable Long id, Model model) throws ParvanServiceException {

		UserInfo userInfo = new UserInfo(1L, "userName", "firstName", "lastName", "ip", "context", 1L, null, null, null, null, true, false);
		model.addAttribute("members", memberService.findAll(userInfo));
//		model.addAttribute("status", typeService.findByTitle("taskStatus"));
		/*TaskStatusEnum taskStatusEnum = null ;
		model.addAttribute("status", taskStatusEnum.valueOf("FIXED"));*/
		
		model.addAttribute("taskAssignmentVO", new TaskAssignmentVO());
		model.addAttribute("taskId", id);
		return "assignTo";
	}


}
