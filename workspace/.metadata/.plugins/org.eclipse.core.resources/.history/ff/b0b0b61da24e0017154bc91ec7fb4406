package com.parvanpajooh.routemanagement.mvc;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.github.dandelion.datatables.core.ajax.ColumnDef;
import com.github.dandelion.datatables.core.ajax.ColumnDef.SortDirection;
import com.github.dandelion.datatables.core.ajax.DataSet;
import com.github.dandelion.datatables.core.ajax.DatatablesCriterias;
import com.github.dandelion.datatables.core.ajax.DatatablesResponse;
import com.github.dandelion.datatables.extras.spring3.ajax.DatatablesParams;
import com.parvanpajooh.client.common.PageList;
import com.parvanpajooh.common.auth.UserInfoLoader;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ErrorCode;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanRecoverableException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.model.UserInfoWrapper;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseVO;
import com.parvanpajooh.commons.util.Validator;
import com.parvanpajooh.routemanagement.model.criteria.RouteCriteria;
import com.parvanpajooh.routemanagement.model.enums.RouteCategory;
import com.parvanpajooh.routemanagement.model.enums.RouteType;
import com.parvanpajooh.routemanagement.model.vo.CarrierVO;
import com.parvanpajooh.routemanagement.model.vo.RouteVO;
import com.parvanpajooh.routemanagement.mvc.base.RarBaseController;
import com.parvanpajooh.routemanagement.service.CarrierManagementService;
import com.parvanpajooh.routemanagement.service.RouteService;

@Controller
@RequestMapping("/route")
public class RouteController extends RarBaseController {
	
	@EJB(mappedName="java:global/routemanagement-ear/routemanagement-ejb/RouteServiceImpl") 
	private RouteService routeService;
	
	@EJB(mappedName="java:global/routemanagement-ear/routemanagement-ejb/CarrierManagementServiceImpl") 
	private CarrierManagementService carrierManagementService;
	
	@RequestMapping(method = RequestMethod.GET)
	public String showRoutes(HttpServletRequest request, Model model) {
		
		model.addAttribute("rightMenu", "routes");
	    return "routes";
	}
	
	@RequestMapping(value="/save", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> saveRoute(RouteVO routeVO, HttpServletRequest request) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			
			if(Validator.isNull(routeVO.getId())){
				routeVO.setActive(true);
			}
			
			if(Validator.isNull(routeVO.getActive())){
				routeVO.setActive(false);
			}

			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			routeVO = (RouteVO) routeService.save(userInfo, routeVO);
			
			result.put("status", "success");
			result.put("result", routeVO);
			
		} catch (Exception e) {
			proccessException(e, result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/{id}", method = RequestMethod.GET)
	public @ResponseBody Map<String, Object> getRoute(@PathVariable Long id, HttpServletRequest request) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			RouteVO routeVO = (RouteVO) routeService.get(userInfo, id);
			
			result.put("status", "success");
			result.put("result", routeVO);
			
		} catch (Exception e) {
			proccessException(e, result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/get", method = RequestMethod.GET)
	public @ResponseBody RouteVO getRouteByParam(Long id, HttpServletRequest request) {
		
		RouteVO routeVO = null;
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			routeVO = (RouteVO) routeService.get(userInfo, id);
			
		} catch (Exception e) {
			routeVO = new RouteVO();
		}
		
		return routeVO;
	}
	
	@RequestMapping(value="/del/{id}", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> deleteRoute(@PathVariable Long id, HttpServletRequest request) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			routeService.delete(userInfo, id);
			
			result.put("status", "success");
			
		} catch (Exception e) {
			proccessException(e, result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/delall", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> deleteRoutes(@RequestParam("id") Long[] ids, HttpServletRequest request) {
		
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			routeService.delete(userInfo, ids);
			
			result.put("status", "success");
			
		} catch (Exception e) {
			proccessException(e, result);
		}
		
		return result;
	}
	
	/**
	 * 
	 * @param criterias
	 * @param term
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/carriers", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<CarrierVO> findCarriers(@DatatablesParams DatatablesCriterias criterias, String term,
			HttpServletRequest request) {
		log.trace("Entering findCarriers( criterias={}, term={})", criterias, term);
		
		int firstResult = criterias.getStart();
		int size = criterias.getLength();
		int page = (firstResult / size) + 1;
		DataSet<CarrierVO> dataSet = null;
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			UserInfoWrapper userInfoWrapper = new UserInfoWrapper(userInfo);
			String code = userInfoWrapper.getAgentHubNodeCode();
			String id = userInfoWrapper.getAgentHubNodeId();
			String name = userInfoWrapper.getAgentHubNodeName();
			PageList<CarrierVO> rows = carrierManagementService.findCarriers(userInfo, term, page, size);
			
			dataSet = new DataSet<CarrierVO>(rows.getElements(), (long) rows.getElements().size(), (long)rows.getTotal());
			
		} catch (Exception e) {
			log.error("Error occurred while findCarriers.", e);
			dataSet = new DataSet<CarrierVO>(new ArrayList<CarrierVO>(), 0l, 0l);
		}
		log.debug("Exiting findCarriers()");
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	
	/**
	 * 
	 * @param code
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/carrier", method = RequestMethod.GET)
	public @ResponseBody CarrierVO getCarrier(@RequestParam(value = "carrierCode") String carrierCode, HttpServletRequest request) {
		log.debug("Entering getCarrier( carrierCode={})", carrierCode);
		CarrierVO carrier = null;
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			if (Validator.isNotNull(carrierCode)) {
				carrier = carrierManagementService.findCarrierByCode(userInfo, carrierCode);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("Error occurred while getCarrier.", e);
		}
		log.debug("Exiting getCarrier()");
		return carrier;
	}
	
	/**
	 * 
	 * @param criterias
	 * @param routeCriteria
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<BaseVO> paging(@DatatablesParams DatatablesCriterias criterias, RouteCriteria routeCriteria, HttpServletRequest request) {
		int firstResult = criterias.getStart();
		int maxResults = criterias.getLength();
		ColumnDef columnDef = criterias.getSortedColumnDefs().get(0);
		SortDirectionEnum sortDirection = SortDirectionEnum.Ascending;
		String sortCriterion = columnDef.getName();
		
		String type = request.getParameter("type");
		if (Validator.isNotNull(type)) {
			routeCriteria.setTypes( new RouteType[]{ RouteType.valueOf( type ) } );
		}
		
		String category = request.getParameter("category");
		if (Validator.isNotNull(category)) {
			routeCriteria.setCategories( new RouteCategory[]{ RouteCategory.valueOf( category ) } );
		}
		
		if("0".equals(sortCriterion)){
			sortCriterion = null;
		}
		
		if(columnDef.getSortDirection().equals(SortDirection.DESC)){
			sortDirection = SortDirectionEnum.Descending;
		}

		DataSet<BaseVO> dataSet;
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			List<BaseVO> rows = routeService.findByCriteria(userInfo, routeCriteria, firstResult, maxResults, sortDirection, sortCriterion);
			long totalRecords = routeService.countByCriteria(userInfo, routeCriteria);
			dataSet = new DataSet<BaseVO>(rows, (long) rows.size(), totalRecords);
		} catch (Exception e) {
			log.error("error occured in route paging..." ,e);
			dataSet = new DataSet<BaseVO>(new ArrayList<BaseVO>(), 0l, 0l);
		}
        return DatatablesResponse.build(dataSet, criterias);
    }
	
	@RequestMapping(value="/import", method = RequestMethod.GET)
	public String importRoute(HttpServletRequest request, final ModelMap model) throws Exception {
		log.debug("Entering importRoute()");
		
		return "importRoute";
	}
	
	@RequestMapping(value="/import", method = RequestMethod.POST)
	public String importRoute(@RequestParam("file") MultipartFile uploadedInputStream, 
			HttpServletRequest request, final ModelMap model) throws Exception {

		log.debug("Entering importRateRule(file={})", uploadedInputStream);
		
		try {
			if(uploadedInputStream.isEmpty()){
				throw new ParvanRecoverableException("file", ErrorCode.FIELD_IS_EMPTY);
			}
			
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();

			routeService.importRoutes(userInfo, uploadedInputStream.getInputStream());
			
		} catch(ParvanRecoverableException e){
			model.addAttribute("error", e.getErrorCode().name());
			
			return "importRoute";
			
		} catch(Exception e){
			model.addAttribute("error", "import-route-failed");
			
			return "importRoute";
		}
		
		model.clear();
		
		log.debug("Exiting importRoute");
		
		return "redirect:/route/import";
	}
}
