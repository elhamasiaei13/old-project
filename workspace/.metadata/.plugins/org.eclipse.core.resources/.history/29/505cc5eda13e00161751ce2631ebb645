package com.parvanpajooh.accounting.model;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.NotEmpty;

import com.parvanpajooh.common.util.Validator;
import com.parvanpajooh.common.vo.BaseVO;
import com.parvanpajooh.ecourier.model.BaseModel;
import com.parvanpajooh.accounting.model.vo.AccountVO;
import com.parvanpajooh.accounting.model.vo.VoucherRowVO;
import com.parvanpajooh.accounting.model.vo.VoucherVO;

/**
 * @author moosa
 *
 */
@Entity
@XmlRootElement
@Table(name = "voucherrow_tbl")
public class VoucherRow extends BaseModel {

	/**
	 *
	 */
	private static final long serialVersionUID = -4036378126742804100L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private BigDecimal debit;

	private BigDecimal credit;

	private String referenceId;

	@NotNull
	@NotEmpty
	@Lob
	@Column(length = 10000)
	private String description;

	private LocalDateTime journalDate;

	@ManyToOne
	@JoinColumn(name = "accountId", referencedColumnName = "id")
	private Account account;
	
	@ManyToOne
	@JoinColumn(name = "voucherId", referencedColumnName = "id")
	private Voucher voucher;

	private boolean active;

	@Version
	private Integer version;

	@Override
	public VoucherRowVO toVOLite() {
		VoucherRowVO vo = new VoucherRowVO();

		vo.setId(this.id);
		vo.setDebit(this.debit);
		vo.setCredit(this.credit);
		vo.setReferenceId(this.referenceId);
		vo.setDescription(this.description);
		vo.setJournalDate(getDate(this.journalDate));
		vo.setActive(this.active);
		vo.setVersion(this.version);

		if (Validator.isNotNull(this.account)) {

			AccountVO accountVO = this.account.toVOLite();
			vo.setAccount(accountVO);
		}
		
		if (Validator.isNotNull(this.voucher)) {

			VoucherVO voucherVO = this.voucher.toVOLite();
			vo.setVoucher(voucherVO);
		}

		setAuditToVO(vo);
		return vo;
	}

	@Override
	public VoucherRowVO toVO() {

		VoucherRowVO voucherRowVO = (VoucherRowVO) toVOLite();
		return voucherRowVO;
	}

	@Override
	public void fromVO(BaseVO baseVO) {

		VoucherRowVO vo = (VoucherRowVO) baseVO;

		this.id = vo.getId();
		this.description = vo.getDescription();
		this.debit = vo.getDebit();
		this.credit = vo.getCredit();
		this.referenceId = vo.getReferenceId();
		this.journalDate = vo.getJournalDate();

		getAuditFromVO(vo);
	}

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description
	 *            the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the debit
	 */
	public BigDecimal getDebit() {
		return debit;
	}

	/**
	 * @param debit the debit to set
	 */
	public void setDebit(BigDecimal debit) {
		this.debit = debit;
	}

	/**
	 * @return the credit
	 */
	public BigDecimal getCredit() {
		return credit;
	}

	/**
	 * @param credit the credit to set
	 */
	public void setCredit(BigDecimal credit) {
		this.credit = credit;
	}

	/**
	 * @return the referenceId
	 */
	public String getReferenceId() {
		return referenceId;
	}

	/**
	 * @param referenceId the referenceId to set
	 */
	public void setReferenceId(String referenceId) {
		this.referenceId = referenceId;
	}

	/**
	 * @return the journalDate
	 */
	public LocalDateTime getJournalDate() {
		return journalDate;
	}

	/**
	 * @param journalDate the journalDate to set
	 */
	public void setJournalDate(LocalDateTime journalDate) {
		this.journalDate = journalDate;
	}

	/**
	 * @return the account
	 */
	public Account getAccount() {
		return account;
	}

	/**
	 * @param account the account to set
	 */
	public void setAccount(Account account) {
		this.account = account;
	}

	/**
	 * @return the voucher
	 */
	public Voucher getVoucher() {
		return voucher;
	}

	/**
	 * @param voucher the voucher to set
	 */
	public void setVoucher(Voucher voucher) {
		this.voucher = voucher;
	}

	/**
	 * @return the version
	 */
	public Integer getVersion() {
		return version;
	}

	/**
	 * @param version
	 *            the version to set
	 */
	public void setVersion(Integer version) {
		this.version = version;
	}

	/**
	 * @return the active
	 */
	public boolean isActive() {
		return active;
	}

	/**
	 * @param active
	 *            the active to set
	 */
	public void setActive(boolean active) {
		this.active = active;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "voucher [id=" + id + ", active=" + active + ", version=" + version + "]";
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof VoucherRow)) {
			return false;
		}

		final VoucherRow obj = (VoucherRow) o;

		return new EqualsBuilder().append(this.id, obj.getId()).isEquals();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		return new HashCodeBuilder(-970989579, 1884842917).append(this.id).toHashCode();
	}

	private Date getDate(LocalDateTime ldt) {

		Date date = null;
		if (Validator.isNotNull(ldt)) {
			Instant instant = ldt.atZone(ZoneId.systemDefault()).toInstant();
			date = Date.from(instant);
		}

		return date;
	}
}
