/**
 * 
 */
package com.parvanpajooh.shipment.dao.jpa;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.Metamodel;

import com.parvanpajooh.commons.platform.ejb.dao.jpa.GenericDaoJpa;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanDaoException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanException;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseCriteria;
import com.parvanpajooh.commons.util.Validator;
import com.parvanpajooh.shipment.dao.PackingItemDao;
import com.parvanpajooh.shipment.model.PackingItem;
import com.parvanpajooh.shipment.model.PackingItemState;
import com.parvanpajooh.shipment.model.PackingItemState_;
import com.parvanpajooh.shipment.model.PackingItem_;
import com.parvanpajooh.shipment.model.criteria.PackingItemCriteria;
import com.parvanpajooh.stock2.domain.model.WaybillNumberDisplay_;
import com.parvanpajooh.stock2.domain.model.enums.WaybillNumberType;

/**
 * @author MO
 *
 */
public class PackingItemDaoJpa extends GenericDaoJpa<PackingItem, Long> implements PackingItemDao {

	public PackingItemDaoJpa() {
		super(PackingItem.class);
	}
	
	@Override
	protected List<Predicate> buildPredicateList(BaseCriteria cri, CriteriaBuilder builder, Metamodel metamodel,
			Root<PackingItem> root, Map<String, Join> joins) throws ParvanException {
		
		PackingItemCriteria criteria = (PackingItemCriteria) cri;
		List<Predicate> predicateList = new ArrayList<>();
		
		//----------------------------------------------------------------
		// Current State
		//----------------------------------------------------------------
		Long currentAssignedUserId = criteria.getCurrentAssignedUserId();
		if (Validator.isNotNull(currentAssignedUserId)) {
			Predicate predicate = builder.equal(root.<Long> get(PackingItem_.currentAssignedUserId), currentAssignedUserId);
			predicateList.add(predicate);
		}
		
		//----------------------------------------------------------------
		// Current State
		//----------------------------------------------------------------
		String currentStateCode = criteria.getCurrentStateCode();
		if (Validator.isNotNull(currentStateCode)) {
			Join<PackingItem, PackingItemState> join = joins.get("currentState");
			if (join == null) {
				join = root.join(PackingItem_.currentState, JoinType.LEFT);
			}
			Predicate predicate = builder.equal(join.<String> get(PackingItemState_.code), currentStateCode);
			predicateList.add(predicate);
			joins.put("currentState", join);
		}
		
		//----------------------------------------------------------------
		// Current States
		//----------------------------------------------------------------
		PackingItemState[] currentStates = criteria.getCurrentStates();

		predicateList.add(root.<PackingItemState> get(PackingItem_.currentState).in(Arrays.asList(currentStates)));
	}
		
		//----------------------------------------------------------------
		// not Current State
		//----------------------------------------------------------------
		String currentStateCode = criteria.getCurrentStateCode();
		if (Validator.isNotNull(currentStateCode)) {
			Join<PackingItem, PackingItemState> join = joins.get("currentState");
			if (join == null) {
				join = root.join(PackingItem_.currentState, JoinType.LEFT);
			}
			Predicate predicate = builder.equal(join.<String> get(PackingItemState_.code), currentStateCode);
			predicateList.add(predicate);
			joins.put("currentState", join);
		}
		
		basePredicate((BaseCriteria) criteria, builder, root, predicateList);

		return predicateList;
	}

	@Override
	public PackingItem findByPartNumber(String partNumber) throws ParvanDaoException {
		log.debug("Entering findByPartNumber( partNumber={} )", partNumber);
		PackingItem result = null;
		try {
			String query = "SELECT obj FROM PackingItem obj WHERE obj.partNumber = ?1 ";
			TypedQuery<PackingItem> q = getEntityManager().createQuery(query, PackingItem.class);
			q.setParameter(1, partNumber);
			List<PackingItem> results = q.getResultList();
			if (Validator.isNotNull(results)) {
				if (results.size() == 1) {
					result = results.get(0);
				} else {
					throw new ParvanDaoException("More than one packingItem found for partNumber " + partNumber);
				}
			}
		} catch (ParvanDaoException e) {
			throw e;

		} catch (Exception e) {
			throw new ParvanDaoException("Unknown exception occurred during findByPartNumber.", e);
		}
		return result;
	}

}
