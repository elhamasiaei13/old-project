package com.parvanpajooh.agentmanagement.model;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Version;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.hibernate.validator.constraints.NotEmpty;

import com.google.common.base.Joiner;
import com.google.common.base.Splitter;
import com.parvanpajooh.agentmanagement.model.vo.EmployeeVO;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.commons.platform.ejb.model.BaseModel;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseVO;
import com.parvanpajooh.commons.util.Validator;

/**
 * @author dev-03
 *
 */

@Entity
@XmlRootElement
@Table(name = "generalAgent_tbl")
public class GeneralAgent extends BaseModel {

	/**
	 *
	 */
	private static final long serialVersionUID = -4036378126742804100L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Version
	private Integer version;

	@NotNull
	@NotEmpty
	@Column(unique = true)
	private String name;

	private String canonicalSearchName;

	private String iataCode;

	private String address;

	private String tel;

	private String email;

	private String logoId;

	private Boolean branch;

	private String nodeCode;
	
	private Long nodeId;

	private String remarks;

	private Boolean active;
	
	private String tags;

	@ManyToOne
	@JoinColumn(name = "parentId", referencedColumnName = "id")
	private GeneralAgent parent;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "parent")
	private Set<GeneralAgent> children;

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "generalAgent", cascade=CascadeType.REMOVE)
	private Set<AccountNumber> accountNumbers = new HashSet<>();

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "generalAgent", cascade=CascadeType.REMOVE)
	private Set<Employee> employees;

	@Override
	public GeneralAgentVO toVOLite() {
		GeneralAgentVO vo = new GeneralAgentVO();

		vo.setId(this.id);
		vo.setVersion(this.version);
		vo.setName(this.name);
		vo.setCanonicalSeachName(this.canonicalSearchName);
		vo.setIataCode(this.iataCode);
		vo.setAddress(this.address);
		vo.setTel(this.tel);
		vo.setEmail(this.email);
		vo.setLogoId(this.logoId);
		vo.setBranch(this.branch);
		vo.setNodeCode(this.nodeCode);
		vo.setRemarks(this.remarks);
		vo.setActive(this.active);
		vo.setNodeId(this.nodeId);
		vo.setTags(this.getTags());

		/*
		 * if (Validator.isNotNull(this.parent)) {
		 * 
		 * GeneralAgentVO generalAgentVO = this.parent.toVOLite();
		 * vo.setParent(generalAgentVO); }
		 */


		setAuditToVO(vo);

		return vo;
	}

	@Override
	public GeneralAgentVO toVO() {

		GeneralAgentVO generalAgentVO = (GeneralAgentVO) toVOLite();

		// if (Validator.isNotNull(this.children)) {
		//
		// List<GeneralAgentVO> list = new ArrayList<GeneralAgentVO>();
		//
		// for (GeneralAgent generalAgent : this.children) {
		// list.add(generalAgent.toVOLite());
		// }
		// generalAgentVO.setChildren(list);
		// }

		if (Validator.isNotNull(this.employees)) {

			List<EmployeeVO> list = new ArrayList<EmployeeVO>();

			for (Employee employee : this.employees) {
				list.add(employee.toVOLite());
			}
			generalAgentVO.setEmployees(list);
		}

		return generalAgentVO;
	}

	@Override
	public void fromVO(BaseVO baseVO) {

		GeneralAgentVO vo = (GeneralAgentVO) baseVO;

		this.id = vo.getId();
		this.version = vo.getVersion();
		this.name = vo.getName();
		this.canonicalSearchName = vo.getCanonicalSeachName();
		this.iataCode = vo.getIataCode();
		this.address = vo.getAddress();
		this.tel = vo.getTel();
		this.email = vo.getEmail();
		this.logoId = vo.getLogoId();
		this.branch = vo.getBranch();
		this.active = vo.getActive();
		this.nodeCode = vo.getNodeCode();
		this.remarks = vo.getRemarks();
		this.nodeId = vo.getNodeId();
		this.setTags(vo.getTags());

		// if (Validator.isNotNull(vo.getAccountNumbers())) {
		// AccountNumber accountNumber = new AccountNumber();
		// List<AccountNumber> list = new ArrayList<AccountNumber>();
		//
		// for (AccountNumberVO accountNumberVO : vo.getAccountNumbers()) {
		// accountNumber.fromVO(accountNumberVO);
		// list.add(accountNumber);
		// }
		// this.accountNumbers = new HashSet<AccountNumber>(list);
		// }

		// if (Validator.isNotNull(vo.getEmployees())) {
		// Employee employee = new Employee();
		// List<Employee> list = new ArrayList<Employee>();
		//
		// for (EmployeeVO employeeVO : vo.getEmployees()) {
		// employee.fromVO(employeeVO);
		// list.add(employee);
		// }
		// this.employees = new HashSet<Employee>(list);
		// }

		// if (Validator.isNotNull(vo.getParent())) {
		// GeneralAgent agent = new GeneralAgent();
		// agent.fromVO(vo.getParent());
		//
		// this.parent = agent;
		// }

		getAuditFromVO(vo);
	}

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the version
	 */
	public Integer getVersion() {
		return version;
	}

	/**
	 * @param version
	 *            the version to set
	 */
	public void setVersion(Integer version) {
		this.version = version;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name
	 *            the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the canonicalSearchName
	 */
	public String getCanonicalSearchName() {
		return canonicalSearchName;
	}

	/**
	 * @param canonicalSearchName
	 *            the canonicalSearchName to set
	 */
	public void setCanonicalSearchName(String canonicalSearchName) {
		this.canonicalSearchName = canonicalSearchName;
	}

	/**
	 * @return the iataCode
	 */
	public String getIataCode() {
		return iataCode;
	}

	/**
	 * @param iataCode
	 *            the iataCode to set
	 */
	public void setIataCode(String iataCode) {
		this.iataCode = iataCode;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @param address
	 *            the address to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @return the tel
	 */
	public String getTel() {
		return tel;
	}

	/**
	 * @param tel
	 *            the tel to set
	 */
	public void setTel(String tel) {
		this.tel = tel;
	}

	/**
	 * @return the email
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @param email
	 *            the email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * @return the logoId
	 */
	public String getLogoId() {
		return logoId;
	}

	/**
	 * @param logoId
	 *            the logoId to set
	 */
	public void setLogoId(String logoId) {
		this.logoId = logoId;
	}

	/**
	 * @return the branch
	 */
	public Boolean getBranch() {
		return branch;
	}

	/**
	 * @param branch
	 *            the branch to set
	 */
	public void setBranch(Boolean branch) {
		this.branch = branch;
	}

	/**
	 * @return the active
	 */
	public Boolean getActive() {
		return active;
	}

	/**
	 * @param active
	 *            the active to set
	 */
	public void setActive(Boolean active) {
		this.active = active;
	}

	/**
	 * @return the nodeId
	 */
	public Long getNodeId() {
		return nodeId;
	}

	/**
	 * @param nodeId
	 *            the nodeId to set
	 */
	public void setNodeId(Long nodeId) {
		this.nodeId = nodeId;
	}

	/**
	 * @return the nodeCode
	 */
	public String getNodeCode() {
		return nodeCode;
	}

	/**
	 * @param nodeCode
	 *            the nodeCode to set
	 */
	public void setNodeCode(String nodeCode) {
		this.nodeCode = nodeCode;
	}

	/**
	 * @return the remarks
	 */
	public String getRemarks() {
		return remarks;
	}

	/**
	 * @param remarks
	 *            the remarks to set
	 */
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	/**
	 * @return the parent
	 */
	public GeneralAgent getParent() {
		return parent;
	}

	/**
	 * @param parent
	 *            the parent to set
	 */
	public void setParent(GeneralAgent parent) {
		this.parent = parent;
	}

	/**
	 * @return the children
	 */
	public Set<GeneralAgent> getChildren() {
		return children;
	}

	/**
	 * @param children
	 *            the children to set
	 */
	public void setChildren(Set<GeneralAgent> children) {
		this.children = children;
	}

	/**
	 * @return the accountNumbers
	 */
	public Set<AccountNumber> getAccountNumbers() {
		return accountNumbers;
	}

	/**
	 * @param accountNumbers
	 *            the accountNumbers to set
	 */
	public void setAccountNumbers(Set<AccountNumber> accountNumbers) {
		this.accountNumbers = accountNumbers;
	}

	/**
	 * @return the employees
	 */
	public Set<Employee> getEmployees() {
		return employees;
	}

	/**
	 * @param employees
	 *            the employees to set
	 */
	public void setEmployees(Set<Employee> employees) {
		this.employees = employees;
	}

	/**
	 * 
	 * @return the tags
	 */
	public List<String> getTags() {
		List<String> result = new ArrayList<String>();
		if (Validator.isNotNull(this.tags)) {
			for (String s : Splitter.on(',').split(this.tags)) {
				result.add(s.trim());
			}
		}
		return result;
	}

	/**
	 * @param tags
	 *            the tags to set
	 */
	public void setTags(List<String> tags) {
		if (Validator.isNotNull(tags) && tags.size() > 0) {
			this.tags = Joiner.on(',').join(tags);
			// this.tags = "," + this.tags + ",";
		} else {
			this.tags = null;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "GeneralAgent [id=" + id + ", name=" + name + ", address=" + address + ", tel=" + tel + ", email=" + email + ", logoId=" + logoId + ", brach ="
				+ branch + ", active=" + active + ", nodeCode=" + nodeCode + ", version=" + version + "]";
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof GeneralAgent)) {
			return false;
		}

		final GeneralAgent obj = (GeneralAgent) o;

		return new EqualsBuilder().append(this.id, obj.getId()).isEquals();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int hashCode() {
		return new HashCodeBuilder(-970989579, 1884842917).append(this.id).toHashCode();
	}

}
