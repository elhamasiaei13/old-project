package com.parvanpajooh.agentmanagement.dao.jpa;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.Metamodel;

import com.parvanpajooh.agentmanagement.dao.AccountNumberDao;
import com.parvanpajooh.agentmanagement.model.AccountNumber;
import com.parvanpajooh.agentmanagement.model.AccountNumber_;
import com.parvanpajooh.agentmanagement.model.Employee;
import com.parvanpajooh.agentmanagement.model.Employee_;
import com.parvanpajooh.agentmanagement.model.GeneralAgent;
import com.parvanpajooh.agentmanagement.model.GeneralAgent_;
import com.parvanpajooh.agentmanagement.model.criteria.AccountNumberCriteria;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.commons.platform.ejb.dao.jpa.GenericDaoJpa;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanException;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseCriteria;
import com.parvanpajooh.commons.util.DateUtil;
import com.parvanpajooh.commons.util.Validator;


/**
 * 
 * @author 
 *
 */
@Stateless
public class AccountNumberDaoJpa extends GenericDaoJpa<AccountNumber, Long> implements AccountNumberDao {

	public AccountNumberDaoJpa() {
		super(AccountNumber.class);
	}
	
	@Override
	protected List<Predicate> buildPredicateList(
			BaseCriteria cri, 
			CriteriaBuilder builder, 
			Metamodel metamodel, 
			Root<AccountNumber> root, Map<String, Join> joins) throws ParvanException {

		//LOG
    	log.debug("Entering buildPredicateList( ... )");
    	
    	AccountNumberCriteria accountNumberCriteria = (AccountNumberCriteria) cri;
    	
		List<Predicate> predicateList = new ArrayList<Predicate>();
		
		String accountNumber = accountNumberCriteria.getAccountNumber();
		
		GeneralAgentVO generalAgent = accountNumberCriteria.getGeneralAgent();
		
		// ----------------------------------------------------------------
		// GeneralAgent
		// ----------------------------------------------------------------
		if (Validator.isNotNull(generalAgent) && Validator.isNotNull(generalAgent.getId())) {

			Join<Employee, GeneralAgent> memberJoin = root.join("generalAgent");
			if (Validator.isNotNull(generalAgent.getId())) {

				Predicate predicate = builder.equal(memberJoin.<Long> get(GeneralAgent_.id), generalAgent.getId());
				predicateList.add(predicate);
			}

		}
		// ----------------------------------------------------------------
		// accountNumber
		// ----------------------------------------------------------------
		if (Validator.isNotNull(accountNumber)) {
			Predicate predicate = builder.equal(root.<String> get(AccountNumber_.accountNumber), accountNumber);
			predicateList.add(predicate);
		}
			
		//LOG
    	log.debug("Leaving buildPredicateList(): {}", predicateList.size());
    	
    	return predicateList;
	}
	protected void basePredicate(BaseCriteria cri, CriteriaBuilder builder, Root<AccountNumber> root, List<Predicate> predicateList) {
		
		if (Validator.isNotNull(cri.getCreateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("createUserId"), cri.getCreateUserId());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("updateUserId"), cri.getUpdateUserId());
			predicateList.add(predicate);
		}

		// createDate
		if(Validator.isNotNull(cri.getCreateDateFrom())){
			LocalDateTime createDateTimeFrom = cri.getCreateDateFrom();
			createDateTimeFrom = createDateTimeFrom.withNano(0); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime>get("createDate"), createDateTimeFrom);
    		predicateList.add(predicate);
    	}
    	
    	if(Validator.isNotNull(cri.getCreateDateTo())){
			LocalDateTime createDateTimeTo = cri.getCreateDateTo();
    		createDateTimeTo = createDateTimeTo.withSecond(59); //TODO temporary solution due to ECD-1068
			createDateTimeTo = createDateTimeTo.withNano(999999999); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime>get("createDate"), createDateTimeTo);
    		predicateList.add(predicate);
    	}
    	
    	// updateDate
    	if(Validator.isNotNull(cri.getUpdateDateFrom())){
			LocalDateTime updateDateTimeFrom = cri.getUpdateDateFrom();
			updateDateTimeFrom = updateDateTimeFrom.withNano(0); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime>get("updateDate"), updateDateTimeFrom);
    		predicateList.add(predicate);
    	}
    	
    	if(Validator.isNotNull(cri.getUpdateDateTo())){
			LocalDateTime updateDateTimeTo = cri.getUpdateDateTo();
    		updateDateTimeTo = updateDateTimeTo.withSecond(59); //TODO temporary solution due to ECD-1068
			updateDateTimeTo = updateDateTimeTo.withNano(999999999); //TODO temporary solution due to ECD-1068
    		Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime>get("updateDate"), updateDateTimeTo);
    		predicateList.add(predicate);
    	}
	}
}
