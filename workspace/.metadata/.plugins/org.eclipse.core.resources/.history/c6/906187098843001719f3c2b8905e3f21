package com.parvanpajooh.siteservices.mvc;

import java.net.URLEncoder;
import java.security.SecureRandom;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.dandelion.datatables.core.ajax.ColumnDef;
import com.github.dandelion.datatables.core.ajax.ColumnDef.SortDirection;
import com.github.dandelion.datatables.core.ajax.DataSet;
import com.github.dandelion.datatables.core.ajax.DatatablesCriterias;
import com.github.dandelion.datatables.core.ajax.DatatablesResponse;
import com.github.dandelion.datatables.extras.spring3.ajax.DatatablesParams;
import com.parvanpajooh.client.common.PageList;
import com.parvanpajooh.common.auth.UserInfoLoader;
import com.parvanpajooh.commons.config.Config;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ObjectNotFoundException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.util.Validator;
import com.parvanpajooh.siteservices.model.vo.CityInfoVO;
import com.parvanpajooh.siteservices.model.vo.PersonVO;
import com.parvanpajooh.siteservices.model.vo.RecoveryCodeVO;
import com.parvanpajooh.siteservices.model.vo.RegisterVO;
import com.parvanpajooh.siteservices.model.vo.UserVO;
import com.parvanpajooh.siteservices.mvc.base.SiteServicesBaseController;
import com.parvanpajooh.siteservices.service.IdentityManagement2Service;
import com.parvanpajooh.siteservices.service.ProfileService;
import com.parvanpajooh.siteservices.service.GeoManagementService;


/**
 * @author dev-03
 *
 */
@Controller
@RequestMapping("/profile")
public class ProfileController extends SiteServicesBaseController {

	@EJB(mappedName = "java:global/siteservices-ear/siteservices-ejb/ProfileServiceImpl")
	private ProfileService profileService;
	
	@EJB(mappedName = "java:global/siteservices-ear/siteservices-ejb/IdentityManagement2ServiceImpl")
	private IdentityManagement2Service identityManagement2Service;
	
	@EJB(mappedName = "java:global/siteservices-ear/siteservices-ejb/GeoManagementServiceImpl")
	private GeoManagementService geoManagementService;
	
	@RequestMapping(value="/registers", method = RequestMethod.GET)
	public String show(HttpServletRequest request, Model model) {
		log.debug("Entering show");

		return "profiles";
	}
	
	@RequestMapping(value="/open/register", method = RequestMethod.GET)
	public String showRegisterPage(HttpServletRequest request, Model model) {
		
		//LOG
		log.debug("Entering showRegisterPage()");
		try {
			PersonVO newPerson = new PersonVO();
			model.addAttribute("person", newPerson);
		} catch (Exception e) {
			Map<String, Object> result = new HashMap<String, Object>();
			proccessException(e, result);
			model.addAttribute("result", result);
			return "error-default";
		}
		
	    return "profile-register";
	}
	
	@RequestMapping(value="/open/register/save", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> register(RegisterVO registerVO, HttpServletRequest request, final Model model) {
		log.debug("Entering register(registerVO={})", registerVO);
		Map<String, Object> result = new HashMap<String, Object>();
		UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();

		try {
			profileService.register(userInfo, registerVO);
			
			result.put("status", "success");
			
		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/open/user/{uuid}/activate", method = RequestMethod.GET)
	public String activate(@PathVariable String uuid, HttpServletRequest request, final Model model) {
		
		//LOG
		log.debug("Entering activate(uuid={})", uuid);
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			UserVO userVO = identityManagement2Service.getUserByUuid(userInfo, uuid);
			model.addAttribute("userId", userVO.getId());
			
		} catch (Exception e) {
			proccessException(e, result);
			model.addAttribute("result", result);
			return "error-default";
		}
		
	    return "profile-activate";
	}
	
	@RequestMapping(value="/open/user/activate", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> activateUserAndsetPassword(Long userId, String password, String confirmPassword, HttpServletRequest request, final Model model){
		
		//LOG
		log.debug("Entering activateUserAndsetPassword(userId={}, password={}, confirmPassword={})", userId, password, confirmPassword);
		Map<String, Object> result = new HashMap<String, Object>();

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			profileService.activateUserAndSetPassword(userInfo, userId , password , confirmPassword);
			
			result.put("status", "success");
			
		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/open/user/recover/identify", method = RequestMethod.GET)
	public String identify(HttpServletRequest request, final Model model) {
		
		//LOG
		log.debug("Entering identify()");
		return "profile-recover-identify";
	}
	
	@RequestMapping(value="/open/user/recover/identify", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> identifyAndCreateCode(String emailOrMobile, HttpServletRequest request, final Model model) {
		
		//LOG
		log.debug("Entering submitIdentify(emailOrMobile={})", emailOrMobile);
		Map<String, Object> result = new HashMap<String, Object>();
		String redirectUrl = null;

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			profileService.identifyAndCreateCode(userInfo, emailOrMobile);
			
			redirectUrl = "";
			if(Validator.isEmailAddress(emailOrMobile)){
				redirectUrl = redirectUrl + "?email=" + emailOrMobile +"?rm=email";
			}else if(Validator.isPhoneNumber(emailOrMobile)){
				redirectUrl = redirectUrl + "?mobile=" + emailOrMobile +"?rm=mobile";
			}
			
			result.put("status", "success");
			result.put("redirectUrl", redirectUrl);
			
		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/open/user/recover/code", method = RequestMethod.GET)
	public String getRecoveryCode(String email, String mobile, String rm, HttpServletRequest request, final Model model){
		
		//LOG
		log.debug("Entering getRecoverCode(email={}, mobile={}, rm={})", email, mobile, rm);
		
		model.addAttribute("email", email);
		model.addAttribute("mobile", mobile);
		model.addAttribute("rm", rm);
		
		return "profile-recover-code";
	}
	
	@RequestMapping(value="/open/user/recover/code", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> checkRecoveryCode(RecoveryCodeVO recoveryCodeVO, HttpServletRequest request, final Model model){
		
		//LOG
		log.debug("Entering checkRecoveryCode(recoveryCodeVO={})", recoveryCodeVO);
		Map<String, Object> result = new HashMap<String, Object>();
		
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			recoveryCodeVO = profileService.findRecovryCodeBy(userInfo,recoveryCodeVO);
			
			if(Validator.isNotNull(recoveryCodeVO)){
				result.put("status", "success");
			}
			
		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
		}
		
		return result;
	}
	
	@RequestMapping(value="/open/user/recover/identify", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> identifyAndCreateCode(String emailOrMobile, HttpServletRequest request, final Model model) {
		
		//LOG
		log.debug("Entering submitIdentify(emailOrMobile={})", emailOrMobile);
		Map<String, Object> result = new HashMap<String, Object>();
		String redirectUrl = null;

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			profileService.identifyAndCreateCode(userInfo, emailOrMobile);
			
			redirectUrl = "";
			if(Validator.isEmailAddress(emailOrMobile)){
				redirectUrl = redirectUrl + "?email=" + emailOrMobile +"?rm=email";
			}else if(Validator.isPhoneNumber(emailOrMobile)){
				redirectUrl = redirectUrl + "?mobile=" + emailOrMobile +"?rm=mobile";
			}
			
			result.put("status", "success");
			result.put("redirectUrl", redirectUrl);
			
		} catch (ParvanServiceException e) {
			proccessException(e, result);
			model.addAttribute("result", result);
		}
		
		return result;
	}
	
	@RequestMapping(value = "/open/register/cities/{shortCode}", method = RequestMethod.GET)
	public @ResponseBody CityInfoVO getGeoEntity(@PathVariable String shortCode, HttpServletRequest request) {
		log.debug("Entering getGeoEntity(shortCode={})", shortCode);
		CityInfoVO result = null;
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			if (Validator.isNotNull(shortCode)) {
				result = geoManagementService.getCityByShortCode(userInfo, shortCode);
			}
		} catch (Exception e) {
			log.error("Error occurred while getGeoEntity.", e);
		}
		log.debug("Exiting getGeoEntity()");
		return result;
	}
	
	@RequestMapping(value = "/open/register/cities", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<CityInfoVO> findCity(
			@DatatablesParams DatatablesCriterias criterias, String term, HttpServletRequest request)
			throws ParvanServiceException, ObjectNotFoundException {
		log.debug("Entering findCity( criterias={}, term={})", criterias, term);
		DataSet<CityInfoVO> dataSet = null;
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			int firstResult = criterias.getStart();
			int maxResults = criterias.getLength();
			ColumnDef columnDef = criterias.getSortedColumnDefs().get(0);
			SortDirectionEnum sortDirection = SortDirectionEnum.Ascending;
			String sortCriterion = columnDef.getName();
			if (columnDef.getSortDirection().equals(SortDirection.DESC)) {
				sortDirection = SortDirectionEnum.Descending;
			}
			PageList<CityInfoVO> result = geoManagementService.findCityByNameOrShortCode(userInfo, term,
					firstResult, maxResults, sortDirection, sortCriterion);
			long totalRecords = result.getTotal();
			List<CityInfoVO> elements = result.getElements();
			dataSet = new DataSet<CityInfoVO>(elements, (long) elements.size(), totalRecords);
		} catch (ParvanServiceException e) {
			throw e;
		}
		log.debug("Exiting findCity()");
		return DatatablesResponse.build(dataSet, criterias);
	}
}
