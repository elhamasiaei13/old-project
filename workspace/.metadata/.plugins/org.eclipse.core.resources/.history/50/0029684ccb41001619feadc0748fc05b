package com.parvanpajooh.accounting.mvc;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.dandelion.datatables.core.ajax.ColumnDef;
import com.github.dandelion.datatables.core.ajax.ColumnDef.SortDirection;
import com.github.dandelion.datatables.core.ajax.DataSet;
import com.github.dandelion.datatables.core.ajax.DatatablesCriterias;
import com.github.dandelion.datatables.core.ajax.DatatablesResponse;
import com.github.dandelion.datatables.extras.spring4.ajax.DatatablesParams;
import com.parvanpajooh.accounting.common.exceptions.ErrorCode;
import com.parvanpajooh.accounting.common.exceptions.ParvanRecoverableException;
import com.parvanpajooh.accounting.model.criteria.VoucherCriteria;
import com.parvanpajooh.accounting.model.criteria.VoucherRowCriteria;
import com.parvanpajooh.accounting.model.vo.VoucherRowVO;
import com.parvanpajooh.accounting.model.vo.VoucherVO;
import com.parvanpajooh.accounting.service.AccountService;
import com.parvanpajooh.accounting.service.FiscalYearService;
import com.parvanpajooh.accounting.service.VoucherRowService;
import com.parvanpajooh.accounting.service.VoucherService;
import com.parvanpajooh.common.UserInfo;
import com.parvanpajooh.common.enums.SortDirectionEnum;
import com.parvanpajooh.common.util.DateUtil;
import com.parvanpajooh.common.util.LocaleUtil;
import com.parvanpajooh.common.util.Validator;
import com.parvanpajooh.common.vo.BaseVO;

@Controller
@RequestMapping("/voucher")
public class VoucherController extends BaseController {

	@EJB(mappedName = "java:global/accounting-ear/accounting-ejb/VoucherServiceImpl")
	private VoucherService voucherService;

	@EJB(mappedName = "java:global/accounting-ear/accounting-ejb/VoucherRowServiceImpl")
	private VoucherRowService voucherRowService;

	@EJB(mappedName = "java:global/accounting-ear/accounting-ejb/FiscalYearServiceImpl")
	private FiscalYearService fiscalYearService;

	@EJB(mappedName = "java:global/accounting-ear/accounting-ejb/AccountServiceImpl")
	private AccountService accountService;

	@InitBinder
	public void initBinder(WebDataBinder binder) {

		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
/*		binder.registerCustomEditor(Date.class, new CustomDateEditor(format, true));
		binder.registerCustomEditor(Timestamp.class, new CustomDateEditor(format, true));*/
		binder.registerCustomEditor(LocalDate.class, new CustomDateEditor(format, true));
		binder.registerCustomEditor(Timestamp.class, new CustomDateEditor(format, true));
	}

	@RequestMapping(value = "/show", method = RequestMethod.GET)
	public String showGroups(HttpServletRequest request, Model model) {

		return "showVouchers";
	}

	@RequestMapping(value = "/save", method = { RequestMethod.POST, RequestMethod.GET })
	public String saveVoucher(VoucherVO voucherVO, HttpServletRequest request, Model model) {

		Map<String, Object> result = new HashMap<String, Object>();
		boolean isPosted = request.getMethod().toLowerCase().equals("post");
		List<BaseVO> accountVOs = null;

		if (!isPosted) {

			try {

				accountVOs = accountService.findAll(getUserInfo(request));

				model.addAttribute("voucher", voucherVO);
				model.addAttribute("accountVOs", accountVOs);

			} catch (Exception e) {
				proccessException(e, result);
				model.addAttribute("result", result);
				model.addAttribute("voucher", voucherVO);
				model.addAttribute("accountVOs", accountVOs);
			}

			return "addVoucher";

		} else {

			try {

				String dateStr = request.getParameter("dateTimePicker");
				if (Validator.isNull(dateStr)) {
					throw new ParvanRecoverableException(ErrorCode.FEILDS_IS_EMPTY);
				}

				accountVOs = accountService.findAll(getUserInfo(request));
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				Date issueDate;
				issueDate = df.parse(dateStr);
				String newDateString = df.format(issueDate);
				System.out.println(newDateString);
				LocalDateTime localDate = DateUtil.getFirstTimeOfDate(issueDate);
				voucherVO.setIssueDate(localDate);

				// save voucher
				voucherVO = (VoucherVO) voucherService.save(getUserInfo(request), voucherVO);

				result.put("status", "success");
				result.put("result", voucherVO);

			} catch (Exception e) {
				proccessException(e, result);
				model.addAttribute("result", result);
				model.addAttribute("voucher", voucherVO);
				model.addAttribute("accountVOs", accountVOs);

				return "addVoucher";
			}

			return "redirect:/voucher/show";
		}
	}

	@RequestMapping(value = "/edit/{id}", method = { RequestMethod.POST, RequestMethod.GET })
	public String editVoucher(VoucherVO voucherVO, HttpServletRequest request, Model model, @PathVariable Long id) {

		Locale locale = LocaleUtil.fromLanguageId("IRAN");
		Map<String, Object> result = new HashMap<String, Object>();
		boolean isPosted = request.getMethod().toLowerCase().equals("post");
		List<BaseVO> fiscalYearVOs = null;
		List<BaseVO> voucherRowVO = null;
		List<VoucherRowVO> voucherRow = new ArrayList<VoucherRowVO>();
		VoucherRowCriteria voucherRowCriteria = new VoucherRowCriteria();
		List<BaseVO> accountVOs = null;

		if (!isPosted) {
			try {
				accountVOs = accountService.findAll(getUserInfo(request));
				fiscalYearVOs = fiscalYearService.findAll(getUserInfo(request));
				voucherVO = (VoucherVO) voucherService.get(getUserInfo(request), id);
				voucherRowCriteria.setVoucherId(voucherVO.getId());
				voucherRowVO = voucherRowService.findByCriteria(getUserInfo(request), voucherRowCriteria);
				for (BaseVO b : voucherRowVO) {
					voucherRow.add((VoucherRowVO) b);
				}
				
				String localDateStr = DateUtil.getDate((LocalDateTime) voucherVO.getIssueDate(), locale, "gregorian", ZoneId.systemDefault());
				voucherVO.setVoucherRow(voucherRow);
				model.addAttribute("dtp", localDateStr);
				model.addAttribute("voucher", voucherVO);
				model.addAttribute("fiscalYearVOs", fiscalYearVOs);
				model.addAttribute("accountVOs", accountVOs);
				model.addAttribute("dateTimePicker", accountVOs);

			} catch (Exception e) {
				proccessException(e, result);
				model.addAttribute("result", result);
				model.addAttribute("voucher", voucherVO);
				model.addAttribute("fiscalYearVOs", fiscalYearVOs);
				model.addAttribute("accountVOs", accountVOs);
			}

			return "editVoucher";

		} else {

			try {
				accountVOs = accountService.findAll(getUserInfo(request));
				fiscalYearVOs = fiscalYearService.findAll(getUserInfo(request));

				String dateStr = request.getParameter("dateTimePicker");
				if (Validator.isNull(dateStr)) {
					throw new ParvanRecoverableException(ErrorCode.FEILDS_IS_EMPTY);
				}

				DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				Date issueDate;
				issueDate = df.parse(dateStr);
				String newDateString = df.format(issueDate);
				System.out.println(newDateString);
				LocalDateTime localDate = DateUtil.getFirstTimeOfDate(issueDate);
				voucherVO.setIssueDate(localDate);

				// edit voucher
				voucherVO = (VoucherVO) voucherService.save(getUserInfo(request), voucherVO);

				result.put("status", "success");
				result.put("result", voucherVO);

			} catch (Exception e) {
				proccessException(e, result);
				model.addAttribute("result", result);
				model.addAttribute("voucher", voucherVO);
				model.addAttribute("fiscalYearVOs", fiscalYearVOs);
				model.addAttribute("accountVOs", accountVOs);

				return "editVoucher";
			}

			return "redirect:/voucher/show";
		}
	}

	@RequestMapping(value = "/delete", method = { RequestMethod.POST, RequestMethod.GET })
	public String deleteGroup(HttpServletRequest request, Model model) {

		Map<String, Object> result = new HashMap<String, Object>();
		String id = request.getParameter("voucherId");

		try {

			// delete voucher
			voucherService.delete(getUserInfo(request), Long.parseLong(id));

			result.put("status", "success");

		} catch (Exception e) {
			proccessException(e, result);
			model.addAttribute("result", result);

		}

		return "redirect:/voucher/show";
	}

	private Date getDate(LocalDateTime ldt) {

		Date date = null;
		if (Validator.isNotNull(ldt)) {
			Instant instant = ldt.atZone(ZoneId.systemDefault()).toInstant();
			date = Date.from(instant);
		}

		return date;
	}

	@RequestMapping(value = "/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<BaseVO> findAll(@DatatablesParams DatatablesCriterias criterias, VoucherCriteria voucherCriteria,
			HttpServletRequest request) {

		int firstResult = criterias.getDisplayStart();
		int maxResults = criterias.getDisplaySize();
		ColumnDef columnDef = criterias.getSortingColumnDefs().get(0);
		voucherCriteria.setActive(true);

		SortDirectionEnum sortDirection = SortDirectionEnum.Ascending;
		String sortCriterion = columnDef.getName();

		if ("0".equals(sortCriterion)) {
			sortCriterion = "indexInParent";
		}

		if (columnDef.getSortDirection().equals(SortDirection.DESC)) {
			sortDirection = SortDirectionEnum.Descending;
		}

		DataSet<BaseVO> dataSet;
		try {

			voucherCriteria.setTenantId(null);

			List<BaseVO> rows = voucherService.findByCriteria(getUserInfo(request), voucherCriteria, firstResult, maxResults, sortDirection, sortCriterion);

			long totalRecords = voucherService.countByCriteria(getUserInfo(request), voucherCriteria);
			dataSet = new DataSet<BaseVO>(rows, (long) rows.size(), totalRecords);
		} catch (Exception e) {
			log.error("error occured in menu paging...", e);
			dataSet = new DataSet<BaseVO>(new ArrayList<BaseVO>(), 0l, 0l);
		}
		return DatatablesResponse.build(dataSet, criterias);
	}

	private UserInfo getUserInfo(HttpServletRequest request) {
		UserInfo userInfo = new UserInfo(1L, "zammad", "azam", "musavian", request.getRemoteAddr(), "accounting-web", 1L, null, null, null, null, true, false,
				null, null, null);

		// UserInfo userInfo = (UserInfo)
		// request.getSession().getAttribute("userInfo");
		return userInfo;

	}
}
