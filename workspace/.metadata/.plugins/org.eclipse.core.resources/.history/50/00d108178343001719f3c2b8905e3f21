package com.parvanpajooh.siteservices.service.impl;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.commons.platform.ejb.ddd.application.AbstractApplicationServiceImpl;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.siteservices.model.criteria.RecoveryCodeCriteria;
import com.parvanpajooh.siteservices.model.vo.RecoveryCodeVO;
import com.parvanpajooh.siteservices.model.vo.RegisterVO;
import com.parvanpajooh.siteservices.service.IdentityManagement2LocalService;
import com.parvanpajooh.siteservices.service.ProfileLocalService;
import com.parvanpajooh.siteservices.service.ProfileService;
import com.parvanpajooh.siteservices.service.RecoveryCodeLocalService;

/**
 * @author dev-03
 *
 */
@Stateless
public class ProfileServiceImpl extends AbstractApplicationServiceImpl implements ProfileService {

	/**
	 * Log variable for all child classes.
	 */
	static final Logger log = LoggerFactory.getLogger(ProfileServiceImpl.class);

	@Inject
	private ProfileLocalService profileLocalService;

	@Inject
	private IdentityManagement2LocalService identityManagemen2tLocalService;
	
	@Inject
	private RecoveryCodeLocalService recoveryCodeLocalService;

	@Override
	public void register(UserInfo userInfo, RegisterVO registerVO) throws ParvanServiceException {

		// LOG
		log.debug("Entering register( registerVO={})", registerVO);
		profileLocalService.register(registerVO);
	}

	@Override
	public void activateUserAndSetPassword(UserInfo userInfo, Long userId, String password, String confirmPassword) throws ParvanServiceException {

		// LOG
		log.debug("Entering activateUserAndSetPassword( userInfo={}, userId={}, password={}, confirmPassword={})", userInfo, userId, password, confirmPassword);
		identityManagemen2tLocalService.activateUserAndSetPassword(userId, password, confirmPassword);
	}

	@Override
	public void identifyAndCreateCode(UserInfo userInfo, String emailOrMobile) throws ParvanServiceException {

		// LOG
		log.debug("Entering verifyEmailOrMobile( userInfo={}, emailOrMobile={})", userInfo, emailOrMobile);
		profileLocalService.identifyAndCreateCode(emailOrMobile);
	}

	@Override
	public RecoveryCodeVO checkRecovryCode(UserInfo userInfo, RecoveryCodeVO recoveryCodeVO) throws ParvanServiceException {

		// LOG
		log.debug("Entering checkRecovryCode( userInfo={}, recoveryCodeVO={})", userInfo, recoveryCodeVO);
		
		RecoveryCodeCriteria criteria = new RecoveryCodeCriteria();
		criteria.setCode(recoveryCodeVO.getCode());
		criteria.setMobile(recoveryCodeVO.getMobile());
		criteria.setEmail(recoveryCodeVO.setEmail(email));
		recoveryCodeLocalService.findByCriteria(criteria);
	}
}
