<!DOCTYPE html>

<html xmlns:th="http://www.thymeleaf.org" xmlns:dt="http://github.com/dandelion/datatables" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout" layout:decorator="filter-layout"
	ddl:bundle-includes="bootstrapValidator,select2">

<head>
<title>Task AddComment</title>

<style>
.select-device-modal label {
	margin-bottom: 0px;
}

.select-device-modal input {
	width: auto;
	height: 28px;
}

.select-device-modal .form-control {
	width: auto;
}

.select-device-modal table.dataTable td {
	padding: 1px 10px;
}

.select-device-modal .dataTables_filter label {
	margin-bottom: 5px;
}
</style>
</head>

<body th:with="rightMenu='tasks'">
	<section layout:fragment="top-header" class="fixed-header">

		<div class="ui-header-image pull-left">
			<img data-src="holder.js/140x140" class="img-circle" alt="140x140" src="/stock2-web/resources/images/stack.png" th:src="@{/resources/images/stack.png}" style="width: 48px; height: 48px;" />
		</div>

		<div class="ui-header-title">
			<div class="split-left">
				<h3>
					<small>Add Comment</small>
				</h3>
				<h3 th:text="${taskDisplayDto.taskKey} +' / '+ ${taskDisplayDto.taskSubject}"></h3>
			</div>
		</div>

	</section>

	<!-- Main content -->
	<!-- BODY -->
	<section class="content" layout:fragment="content">
		<div class="box box-default">
			<div class="box-header">
				<h3 class="box-title" th:text="#{taskCommentCommand}">افزودن یادداشت</h3>
			</div>
			<div class="box-body" style="display: block;">
				<dy:form entity="TaskCommentCommand" form="create" type="create" />
			</div>

			<div class="modal-footer">
				<button type="button" class="btn btn-primary" id="taskCommentBtn" th:onclick="'addComment(\'' + ${taskDisplayDto.taskKey} + '\')'" th:text="#{button.save}">Save</button>
				<a type="button" class="btn btn-default" th:href="@{'/tasks/'+${taskDisplayDto.taskKey}+'/details'}" th:text="#{button.cancel}">Close</a>
			</div>
		</div>

	</section>

	<th:block layout:fragment="javascripts">
		<script th:inline="javascript">

		/*<![CDATA[*/
		
         $(document).on('ready', function() {

        	 $('#createTaskCommentCommandForm').bootstrapValidator({excluded: [':disabled'], feedbackIcons: {valid: 'fa fa-check',invalid: 'fa fa-times',validating: 'fa fa-refresh'}});

         });
		
		function addComment(taskKey){

			$('#createTaskCommentCommandForm').data('bootstrapValidator').validate();
			if($('#createTaskCommentCommandForm').data('bootstrapValidator').isValid()){
					$('#createTaskCommentCommandForm').find('input[name=taskKey]').val(taskKey);

					var $btn = $(this);
					
					$btn.attr('disabled', true);
					$.post('/taskmanagement-web/tasks/comment/save', $('#createTaskCommentCommandForm').serialize()).done(function(data) {
						if(data.status == 'success') {
							showTopleftGrowl('success', 'Create', 'Create Successful');
							window.open("/taskmanagement-web/tasks/" + taskKey +"/details" , "_self");
						} else if(data.status == 'ValidationException'){
							$('#createTaskCommentCommandForm').find('.callout').text(data.invalidField + ' invalid-value').removeClass('hide');
						} else if(data.status == 'ObjectExistsException'){
							$('#createTaskCommentCommandForm').find('.callout').text((data.invalidField ? data.invalidField : 'data') + ' already-exists').removeClass('hide');
						} else if(data.status == 'ErrorCode'){
							if(data.errorMessage){
								$('#createTaskCommentCommandForm').find('.callout').text(data.errorMessage).removeClass('hide');
							} else {
								$('#createTaskCommentCommandForm').find('.callout').text(messages[data.errorCode]).removeClass('hide');
							}
						} else {
							console.debug(data.status);
							$('#createTaskCommentCommandForm').find('.callout').text((data.message ? data.message : 'save.failed_fa_IR')).removeClass('hide');
						}
					$btn.attr('disabled', false);
					}).fail(function( jqXHR, textStatus, errorThrown ){failAjax(jqXHR, textStatus, errorThrown, 'taskCommentBtn')});				
			}
			return false;
		}
		
		/*]]>*/
		
		</script>
	</th:block>
</body>
</html>

