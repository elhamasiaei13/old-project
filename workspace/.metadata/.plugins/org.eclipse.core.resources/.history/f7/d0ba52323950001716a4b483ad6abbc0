package com.parvanpajooh.complaintmanagement.controller;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.Context;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.parvanpajooh.agentmanagement.model.criteria.GeneralAgentCriteria;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.client.agentmanagement.model.GeneralAgentMsg;
import com.parvanpajooh.common.auth.BaseRestController;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseVO;
import com.parvanpajooh.complaintmanagement.application.ComplaintApplicationService;


/**
 * @author dev-03
 *
 */
@RestController
@RequestMapping("/v1")
public class ComplaintManagementRestController extends BaseRestController {
	
	protected transient final Logger log = LoggerFactory.getLogger(getClass());
	
	@EJB(mappedName="java:global/complaintmanagement-ear/complaintmanagement-ejb/ComplaintApplicationServiceImpl")
	private ComplaintApplicationService complaintApplicationService;
	
	@RequestMapping(value = "/hello", method = RequestMethod.GET)
	public String helloWord(
			HttpServletRequest request, 
			@RequestHeader(value = "user_name") String userName, 
			@RequestHeader(value = "ip") String ip) {

		// LOG
		log.debug("Entering helloWord(userName={} , ip={})", userName, ip);
		return "hello " + userName;
	} 
	
	@RequestMapping(value = "/complaints", method = RequestMethod.GET)
	public List<GeneralAgentMsg> findComplaintsBy(
			HttpServletRequest request, 
			@RequestHeader(value = "user_name") String userName, 
			@RequestHeader(value = "ip") String ip,
			@RequestParam(value = "page") int page, 
			@RequestParam(value = "size") int size,
			@Context HttpServletResponse response) throws ParvanServiceException {

		log.debug("Entering findAgentsByCriteria(userName={} , ip={} ,active={}, name={}, nodeCode={}, nodeId)", userName, ip, active, name, nodeCode, nodeId);

		List<GeneralAgentMsg> generalAgentMsgs = null;

		if (page > 0) {
			page = page - 1;// my pagination is zero based, but rest
							// pagination best practice is 1-based
		}

		if (size == 0) {
			size = 20;// it's default page size
		}

		int firstResult = (page * size);
		int maxResults = size;
		SortDirectionEnum sortDirection = SortDirectionEnum.Ascending;
		String sortCriterion = "id";

		GeneralAgentCriteria agentCriteria = new GeneralAgentCriteria();
		
		agentCriteria.setActive(active);
		agentCriteria.setCanonicalSearchName(name);
		agentCriteria.setNodeCode(nodeCode);
		agentCriteria.setNodeId(nodeId);
		
		UserInfo userInfo = loadUserInfo(userName, ip);

		List<BaseVO> baseVOs = generalAgentService.findByCriteria(userInfo, agentCriteria, firstResult, maxResults, sortDirection, sortCriterion);
		int count = generalAgentService.countByCriteria(userInfo, agentCriteria);

		generalAgentMsgs = new ArrayList<GeneralAgentMsg>();

		for (BaseVO baseVO : baseVOs) {

			GeneralAgentVO vo = (GeneralAgentVO) baseVO;
			generalAgentMsgs.add(vo.toMsg());
		}

		response.addIntHeader("total", count);


		log.debug("Leaving findAgentsByCriteria(): ret={}", (generalAgentMsgs != null) ? generalAgentMsgs.size() : "NULL");
		return generalAgentMsgs;
	}
	
}
	