package com.parvanpajooh.common.auth;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ejb.EJB;

import org.cloudfoundry.identity.uaa.oauth.Claims;
import org.cloudfoundry.identity.uaa.user.UaaAuthority;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.codec.Base64;
import org.springframework.security.oauth2.common.exceptions.InvalidTokenException;
import org.springframework.security.oauth2.provider.AuthorizationRequest;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.oauth2.provider.client.BaseClientDetails;
import org.springframework.security.oauth2.provider.token.RemoteTokenServices;
import org.springframework.util.Assert;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestOperations;
import org.springframework.web.client.RestTemplate;

import com.parvanpajooh.client.agentmanagement.model.EmployeeMsg;
import com.parvanpajooh.client.agentmanagement.model.GeneralAgentMsg;
import com.parvanpajooh.client.identitymanagement2.model.RoleMsg;
import com.parvanpajooh.client.identitymanagement2.model.UserMsg;
import com.parvanpajooh.commons.platform.ejb.exceptions.ObjectNotFoundException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.service.GlobalCacheService;

public class CustomRemoteTokenServices extends RemoteTokenServices {

	protected transient final Logger log = LoggerFactory.getLogger(getClass());

	/*@EJB(mappedName="java:global/identityManagment-ear/identityManagment-ejb/IdmServiceFacadeImpl!com.parvanpajooh.idm.service.IdmServiceFacade") 
	private IdmServiceFacade idmServiceFacade;*/
	
	@Autowired
	private UserServiceAdapter userServiceAdapter;
	
	@Autowired
	private AgentManagementServiceAdapterRest agentManagementServiceAdapterRest;
	
	@EJB(mappedName = "java:app/common-crosscutting-ejb/parvanGlobalCache")
	private GlobalCacheService globalCacheService;
	
    private RestOperations restTemplate;

    private String checkTokenEndpointUrl;

    private String clientId;

    private String clientSecret;

    private ObjectMapper mapper = new ObjectMapper();

    private boolean storeClaims = false;

    public CustomRemoteTokenServices() {
        restTemplate = new RestTemplate();
        ((RestTemplate) restTemplate).setErrorHandler(new DefaultResponseErrorHandler() {
            @Override
            // Ignore 400
            public void handleError(ClientHttpResponse response) throws IOException {
                if (response.getRawStatusCode() != 400) {
                    super.handleError(response);
                }
            }
        });
    }

    public boolean isStoreClaims() {
        return storeClaims;
    }

    /**
     * Set to true to include all claims received from the UAA /check_token endpoint as string request parameters
     * accessible through OAuth2Authentication.getOAuth2Request().getRequestParameters()
     * @param storeClaims
     */
    public void setStoreClaims(boolean storeClaims) {
        this.storeClaims = storeClaims;
    }

    public void setRestTemplate(RestOperations restTemplate) {
        this.restTemplate = restTemplate;
    }

    public void setCheckTokenEndpointUrl(String checkTokenEndpointUrl) {
        this.checkTokenEndpointUrl = checkTokenEndpointUrl;
    }

    public void setClientId(String clientId) {
        this.clientId = clientId;
    }

    public void setClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
    }
    
    @Override
    public OAuth2Authentication loadAuthentication(String accessToken) throws AuthenticationException {

        MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
        formData.add("token", accessToken);
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", getAuthorizationHeader(clientId, clientSecret));
        Map<String, Object> map = postForMap(checkTokenEndpointUrl, formData, headers);

        if (map.containsKey("error")) {
            logger.debug("check_token returned error: " + map.get("error"));
            throw new InvalidTokenException(accessToken);
        }

        Assert.state(map.containsKey("client_id"), "Client id must be present in response from auth server");
        String remoteClientId = (String) map.get("client_id");

        Set<String> scope = new HashSet<String>();
        if (map.containsKey("scope")) {
            @SuppressWarnings("unchecked")
            Collection<String> values = (Collection<String>) map.get("scope");
            scope.addAll(values);
        }
        AuthorizationRequest clientAuthentication = new AuthorizationRequest(remoteClientId, scope);

        if (map.containsKey("resource_ids") || map.containsKey("client_authorities")) {
            Set<String> resourceIds = new HashSet<String>();
            if (map.containsKey("resource_ids")) {
                @SuppressWarnings("unchecked")
                Collection<String> values = (Collection<String>) map.get("resource_ids");
                resourceIds.addAll(values);
            }
            Set<GrantedAuthority> clientAuthorities = new HashSet<GrantedAuthority>();
            if (map.containsKey("client_authorities")) {
                @SuppressWarnings("unchecked")
                Collection<String> values = (Collection<String>) map.get("client_authorities");
                clientAuthorities.addAll(getAuthorities(map, values));
            }
            BaseClientDetails clientDetails = new BaseClientDetails();
            clientDetails.setClientId(remoteClientId);
            clientDetails.setResourceIds(resourceIds);
            clientDetails.setAuthorities(clientAuthorities);
            clientAuthentication.setResourceIdsAndAuthoritiesFromClientDetails(clientDetails);
        }
        Map<String, String> requestParameters = new HashMap<>();
        if (isStoreClaims()) {
            for (Map.Entry<String, Object> entry : map.entrySet()) {
                if (entry.getValue()!=null && entry.getValue() instanceof String) {
                    requestParameters.put(entry.getKey(), (String)entry.getValue());
                }
            }
        }

        if (map.containsKey(Claims.ADDITIONAL_AZ_ATTR)) {
            try {
                requestParameters.put(Claims.ADDITIONAL_AZ_ATTR, mapper.writeValueAsString(map.get(Claims.ADDITIONAL_AZ_ATTR)));
            } catch (IOException e) {
                throw new IllegalStateException("Cannot convert access token to JSON", e);
            }
        }
        clientAuthentication.setRequestParameters(Collections.unmodifiableMap(requestParameters));

        Authentication userAuthentication = getUserAuthentication(map, scope);

        clientAuthentication.setApproved(true);
        return new OAuth2Authentication(clientAuthentication.createOAuth2Request(), userAuthentication);
    }

    /**
     * 
     * @param map
     * @param scope
     * @return
     * @throws AuthenticationException
     */
    private Authentication getUserAuthentication(Map<String, Object> map, Set<String> scope) throws AuthenticationException {
        String username = (String) map.get("user_name");
        if (username == null) {
            return null;
        }
        /*Set<GrantedAuthority> userAuthorities = new HashSet<GrantedAuthority>();
        if (map.containsKey("user_authorities")) {
            @SuppressWarnings("unchecked")
            Collection<String> values = (Collection<String>) map.get("user_authorities");
            userAuthorities.addAll(getAuthorities(map, values));
        }
        else {
            // User authorities had better not be empty or we might mistake user
            // for unauthenticated
            userAuthorities.addAll(getAuthorities(map, scope));
        }*/
        String email = (String) map.get("email");
        String id = (String) map.get("user_id");
        String fullName = getFullName(map);
        String ip = "1.1.1.1.1"; //IpUtils.getIpFromRequest(request);
		String tenantId = "1"; //TenantUtil.getTenantId(request);
        // 2017-04-05 return new RemoteUserAuthentication(id, username, email, userAuthorities);
        return populateIdmUserDetails(username, fullName, email, ip, tenantId);
    }
    
    /**
     * 
     * @param map
     * @return
     */
    private String getFullName(Map<String, Object> map) {
        if (map.containsKey("name")) {
            return (String) map.get("name");
        }
        if (map.containsKey("formattedName")) {
            return (String) map.get("formattedName");
        }
        if (map.containsKey("fullName")) {
            return (String) map.get("fullName");
        }
        String firstName = null;
        if (map.containsKey("firstName")) {
            firstName = (String) map.get("firstName");
        }
        if (map.containsKey("givenName")) {
            firstName = (String) map.get("givenName");
        }
        String lastName = null;
        if (map.containsKey("lastName")) {
            lastName = (String) map.get("lastName");
        }
        if (map.containsKey("familyName")) {
            lastName = (String) map.get("familyName");
        }
        if (firstName != null) {
            if (lastName != null) {
                return firstName + " " + lastName;
            }
        }
        return null;
    }
    
    /**
     * 
     * @param userName
     * @param fullName
     * @param email
     * @param ip
     * @param tenantId
     * @return
     */
    private IdmUserDetails populateIdmUserDetails(String userName, String fullName, String email, String ip, String tenantId){
		List<UaaAuthority> userAuthorities = UaaAuthority.USER_AUTHORITIES;
        IdmUserDetails authentication = new IdmUserDetails(userName, userAuthorities);
        authentication.setSource("0");
        //authentication.setSource(Source.classify(userInfoUrl));
        //authentication.setExternalId(getUserId(map));
        
        // get fullName
        if (fullName != null) {
        	authentication.setFullName(fullName);
        }
        
        if (email != null) {
        	authentication.setEmail(email);
        }
    
        try {
        	// ---------------------------------------------------------------------
        	// get from global-cache
        	// ---------------------------------------------------------------------
			Map<String, Object> userDataCacheMap = 
					(Map<String, Object>) globalCacheService.get(
					GlobalCacheService.CacheType.USER_DATAMAP_BY_USERNAME, 
					userName);
        	
        	//if (userDataCacheMap == null) {
	        	// ---------------------------------------------------------------------
	        	// cache miss, so load user, agent, employee from remote services
	        	// ---------------------------------------------------------------------
        		
        		// ---------------------------------------------------------------------
        		// load user
        		// ---------------------------------------------------------------------
	        	UserMsg user = userServiceAdapter.initLoginLoadUserByUsername(userName);
	        	if(user == null){
	        		log.info("user [{}] not found", userName);
	        		throw new ObjectNotFoundException(String.format("user [%s] is not valid", userName));
	        	}
				
				// ---------------------------------------------------------------------
				// load employee
				// ---------------------------------------------------------------------
				EmployeeMsg employeeMsg = agentManagementServiceAdapterRest.initLoginFindEmployeeByUsername(userName);
        		log.info("employeeMsg loaded: [{}]", employeeMsg);
				
				// ---------------------------------------------------------------------
				// load agent
				// ---------------------------------------------------------------------
				GeneralAgentMsg generalAgentMsg = agentManagementServiceAdapterRest.initLoginLoadAgentByUsername(userName);
				if(generalAgentMsg == null){
	        		log.info("user [{}] dosn't assigned to any agent", userName);
					throw new ObjectNotFoundException("user dosn't assigned to any agent.");
				}
				
        		log.info("generalAgentMsg loaded: [{}]", generalAgentMsg);
				
				// ---------------------------------------------------------------------
				// load all subAgents
				// ---------------------------------------------------------------------
				List<GeneralAgentMsg> generalAgentMsgs = agentManagementServiceAdapterRest.initLoginGetAllSubAgentsByParentId(generalAgentMsg.getId());
				
        		log.info("All SubAgents loaded: [{}]", generalAgentMsgs.size());
        		
				Set<Long> allSubAgentIds = new HashSet<Long>();
				
				for (GeneralAgentMsg agentMsg : generalAgentMsgs) {			
					allSubAgentIds.add(agentMsg.getId());
				}
				
				// ---------------------------------------------------------------------
				// put user-agent-employee data to global-cache
				// ---------------------------------------------------------------------
				UserDataCacheMapper userDataCacheMapper = new UserDataCacheMapper(user, generalAgentMsg, employeeMsg, allSubAgentIds);
				userDataCacheMap = userDataCacheMapper.toMap();
				globalCacheService.put(GlobalCacheService.CacheType.USER_DATAMAP_BY_USERNAME, userName, userDataCacheMap);
        	//}
        	
			// ---------------------------------------------------------------------
			// initialize userInfo
			// ---------------------------------------------------------------------
        	UserInfo userInfo = UserDataCacheMap2UserInfoInitializer.initializeUserInfo(userDataCacheMap);
        	
        	String context = null;
        	
        	userInfo.setIp(ip);
        	userInfo.setTenantId(tenantId);
        	userInfo.setContext(context);
			
			// ---------------------------------------------------------------------
			// make authentication object
			// ---------------------------------------------------------------------
        	List<GrantedAuthority> grantedAuths = (List<GrantedAuthority>) authentication.getAuthorities();
        	ArrayList<GrantedAuthority> grantedAuths2 = new ArrayList<>(grantedAuths.size());
        	
        	Set<String> roleNames = userInfo.getRoleNames();
			grantedAuths2.addAll(grantedAuths);
			if(roleNames != null){
				for (String roleName : roleNames) {
					grantedAuths2.add( new SimpleGrantedAuthority(roleName));
				}
			}
			
			Collection<GrantedAuthority> authorities = Collections.unmodifiableList(grantedAuths2);
			authentication = new IdmUserDetails((String)authentication.getPrincipal(), authorities);
			authentication.setSource(authentication.getSource());
			authentication.setExternalId(authentication.getExternalId());
        	authentication.setFullName(authentication.getFullName());
        	authentication.setEmail(authentication.getEmail());
        	authentication.setUserInfo(userInfo);
        	
		} catch (ObjectNotFoundException | ParvanServiceException e) {
			log.error("error in loading user and agent with userName: [{}]", userName, e);
			throw new UsernameNotFoundException("error in loading user and agent with userName: " + authentication.getPrincipal() , e);
		}
        	
        return authentication;
	}

	private Set<GrantedAuthority> getAuthorities(Map<String, Object> map, Collection<String> authorities) {
        Set<GrantedAuthority> result = new HashSet<GrantedAuthority>();
        for (String authority : authorities) {
            result.add(new SimpleGrantedAuthority(authority));
        }
        
        String username = (String) map.get("user_name");
        if (username != null) {
        	
        	UserMsg user = null;
			try {
				user = userServiceAdapter.initLoginLoadUserByUsername(username);
			
			} catch (ParvanServiceException e) {
				log.info("error occurred while getting user from remote service.", e);
			}
        	
			if(user == null){
        		log.info("user [{}] not found", username);
        		throw new UsernameNotFoundException(String.format("user [%s] is not valid", username));
        	}
        	
        	if((user.getActive()) == false){
            	throw new DisabledException("user is not active");
            }
            
        	Set<RoleMsg> roleMsgs = user.getRoles();
        	if (roleMsgs != null && !roleMsgs.isEmpty()) {
        		for (RoleMsg thisRoleMsg : roleMsgs) {
        			result.add(new SimpleGrantedAuthority(thisRoleMsg.getName()));
        		}
        	}
        	
        	/*if(Config.getBooleanProperty("ejbCalls", true)){
        	
	        	try {
					UserVO user = idmServiceFacade.loadUserByUsername(username);
					if(!user.getActive()){
						throw new DisabledException("user is not active");
					}
					
					List<RoleVO> roleVOs = user.getRoles();
					for (RoleVO role : roleVOs) {
						result.add(new SimpleGrantedAuthority(role.getRoleName()));
					}
				} catch (Exception e) {
					throw new UsernameNotFoundException("error in loading user roles", e);
				}
	        	
        	} else {

	        	RestTemplate idmRestTemplate = new RestTemplate();
	            
	            OauthHelper helper = OauthHelper.getInstance();
	        	String accessToken = helper.getAccessToken().getValue();
	        	
	        	MultiValueMap<String, String> formData = new LinkedMultiValueMap<String, String>();
	        	HttpHeaders headers = new HttpHeaders();
	            headers.set("Authorization", "Bearer " + accessToken);
	            
	            UriComponents uriComponents = UriComponentsBuilder.newInstance()
	            		.scheme("http")
	            		.host(Config.getProperty("serverName"))
	            		.path("/identityManagment-rest/ws/rest/loadUserByUsername")
	            		.queryParam("userName", username)
	            		.build()
	            		.encode();
	            
	    		Map<String, Object> userData = idmRestTemplate.exchange(uriComponents.toString(), HttpMethod.GET,
	                    new HttpEntity<MultiValueMap<String, String>>(formData, headers), Map.class).getBody();
	        	
	    		if(userData == null){
	            	throw new UsernameNotFoundException("error in loading user with userName: " + username);
	            }
	            
	            if(((Boolean)userData.get("active")) == false){
	            	throw new DisabledException("user is not active");
	            }
	            
	            List<Map<String, Object>> roles = (List<Map<String, Object>>) userData.get("roles");
	            
	            for (Map<String, Object> role : roles) {
					result.add(new SimpleGrantedAuthority((String) role.get("roleName")));
				}
        	}*/
        }
        
        return result;
    }

    private String getAuthorizationHeader(String clientId, String clientSecret) {
        String creds = String.format("%s:%s", clientId, clientSecret);
        try {
            return "Basic " + new String(Base64.encode(creds.getBytes("UTF-8")));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException("Could not convert String");
        }
    }

    private Map<String, Object> postForMap(String path, MultiValueMap<String, String> formData, HttpHeaders headers) {
        if (headers.getContentType() == null) {
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        }
        @SuppressWarnings("rawtypes")
        Map map = restTemplate.exchange(path, HttpMethod.POST,
                        new HttpEntity<MultiValueMap<String, String>>(formData, headers), Map.class).getBody();
        @SuppressWarnings("unchecked")
        Map<String, Object> result = map;
        return result;
    }
}
