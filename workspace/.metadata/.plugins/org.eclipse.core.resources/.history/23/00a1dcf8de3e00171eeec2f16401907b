package com.parvanpajooh.siteservices.service.impl;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.commons.config.Config;
import com.parvanpajooh.commons.platform.ejb.exceptions.ErrorCode;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanRecoverableException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.commons.util.Validator;
import com.parvanpajooh.siteservices.model.enums.Calendar;
import com.parvanpajooh.siteservices.model.vo.ContactInfoVO;
import com.parvanpajooh.siteservices.model.vo.PersonVO;
import com.parvanpajooh.siteservices.model.vo.UserGroupVO;
import com.parvanpajooh.siteservices.model.vo.UserVO;
import com.parvanpajooh.siteservices.service.IdentityManagement2LocalService;
import com.parvanpajooh.siteservices.service.adapter.IdentityManagement2ServiceAdapter;

/**
 * @author dev-03
 *
 */
@Stateless
public class IdentityManagemen2tLocalServiceImpl implements IdentityManagement2LocalService {

	/**
	 * Log variable for all child classes.
	 */
	static final Logger log = LoggerFactory.getLogger(IdentityManagemen2tLocalServiceImpl.class);

	@Inject
	private IdentityManagement2ServiceAdapter identityManagement2ServiceAdapter;

	@Override
	public UserVO createUser(PersonVO personVO) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering createUser(personVO={})", personVO);
		UserVO userVO = null;
		try {
			
			userVO = _createUser(personVO);
			userVO = identityManagement2ServiceAdapter.createUser(userVO);

		} catch (ParvanServiceException e) {
			throw e;

		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while createUser", e);
		}

		return userVO;
	}

	@Override
	public UserVO getUserByUuid(String uuid) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering getUserByUuid(uuid={})", uuid);
		UserVO userVO = null;
		try {

			userVO = identityManagement2ServiceAdapter.getUserByUuid(uuid);

		} catch (ParvanServiceException e) {
			throw e;

		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while getUserByUuid", e);
		}

		return userVO;
	}
	

	@Override
	public void setPassword(Long id, String password) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering setPassword(id={},password={})", id, password);
		try {

			identityManagement2ServiceAdapter.resetUserPassword(id, password);

		} catch (ParvanServiceException e) {
			throw e;

		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while setPassword", e);
		}
	}
	
	public UserVO _createUser(PersonVO personVO){
		UserVO userVO = new UserVO();
		ContactInfoVO contactInfoVO = personVO.getPrimaryContactInfo();
		
		userVO.setFirstName(personVO.getFirstNameLocal());
		userVO.setLastName(personVO.getLastNameLocal());
		userVO.setEmail(contactInfoVO.getEmail());
		userVO.setPersonUuid(personVO.getUuid());
		userVO.setUserName(contactInfoVO.getEmail());
		userVO.setPersonUuid(personVO.getUuid());
		
		userVO.setZoneId(Config.getProperty("siteservices.register.defaultZoneId"));
		userVO.setLocale(Config.getProperty("siteservices.register.defaultLocal"));
		
		if (Validator.isNotNull(Config.getProperty("siteservices.register.defaultCalendar"))) {
			Calendar calendar = Calendar.valueOf(Config.getProperty("siteservices.register.defaultCalendar"));
			userVO.setCalendar(calendar);
		}
		
		if (Validator.isNotNull(Config.getProperty("siteservices.register.defaultUserGroupId"))) {
			Long userGroupId = Long.parseLong(Config.getProperty("siteservices.register.defaultUserGroupId"));
			UserGroupVO userGroupVO = new UserGroupVO();
			userGroupVO.setId(userGroupId);
			userVO.setUserGroup( userGroupVO );
		}
		
		if (Validator.isNotNull(Config.getProperty("siteservices.register.defaultObjectAccessScopeId"))) {
			Long objectAccessScopeId = Long.parseLong(Config.getProperty("siteservices.register.defaultObjectAccessScopeId"));
			userVO.setObjectAccessScopeId( objectAccessScopeId );
		}
		
		return userVO;
	}

}
