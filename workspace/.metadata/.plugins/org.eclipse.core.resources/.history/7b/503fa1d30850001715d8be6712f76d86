package com.parvanpajooh.complaintmanagement.domain.service.impl;

import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.client.common.PageList;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.ddd.domain.model.dto.BaseDto;
import com.parvanpajooh.commons.platform.ejb.ddd.domain.service.impl.GenericDomainServiceImpl;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanDaoException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.commons.platform.ejb.model.CurrentContext;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.complaintmanagement.domain.model.Complaint;
import com.parvanpajooh.complaintmanagement.domain.model.ComplaintCategory;
import com.parvanpajooh.complaintmanagement.domain.model.criteria.ComplaintCriteria;
import com.parvanpajooh.complaintmanagement.domain.model.dto.ComplaintDto;
import com.parvanpajooh.complaintmanagement.domain.model.enums.Status;
import com.parvanpajooh.complaintmanagement.domain.repository.ComplaintRepository;
import com.parvanpajooh.complaintmanagement.domain.service.ComplaintCategoryDomainService;
import com.parvanpajooh.complaintmanagement.domain.service.ComplaintDomainService;

public class ComplaintDomainserviceImpl extends GenericDomainServiceImpl<Complaint, Long>
		implements ComplaintDomainService {

	static final Logger log = LoggerFactory.getLogger(ComplaintDomainserviceImpl.class);

	private ComplaintRepository compliantRepository;

	@Inject
	private ComplaintCategoryDomainService complaintCategoryDomainService;

	@Inject
	public void setPackingTypeRepository(ComplaintRepository compliantRepository) {
		this.repository = compliantRepository;
		this.compliantRepository = compliantRepository;
	}

	@Override
	public BaseDto save(BaseDto baseDto) throws ParvanServiceException {
		
		try {
			UserInfo userInfo = CurrentContext.getCurrentUserInfo().get();
			ComplaintDto complaintDto = (ComplaintDto) baseDto;

			// validate
			// if(Validator.isNull(complaintDto.x)) {
			// throw new ParvanRecoverableException("complaintDto.x",
			// ErrorCode.FIELD_IS_EMPTY);
			// }

			boolean isNew = (baseDto.getId() == null);

			Complaint complaint = null;

			// check for edit and insert Record
			if (isNew) {
				complaint = new Complaint();
				complaint.setStatus(Status.NEW);
			} else {
				complaint = repository.get(baseDto.getId());
			}

			complaint.fromDto(complaintDto);

			// check for firstName & lastName & userName that not worng
			if (complaint.getFirstName() == null || complaint.getFirstName().equals("")
					|| complaint.getLastName() == null || complaint.getLastName().equals("")) {
				// CurrentContext.getCurrentUserInfo().get();
				complaint.setFirstName(userInfo.getFirstName());
				complaint.setLastName(userInfo.getLastName());
			}

			complaint.setUserName(userInfo.getUserName());

			// check for empty result
			if (complaint.getResult() != null)
				if (!complaint.getResult().equals("")) {
					complaint.setStatus(Status.CLOSED);
				}

			Long categoryId = complaintDto.getCategoryDto().getId();
			ComplaintCategory complaintCategory = complaintCategoryDomainService.get(categoryId);
			complaint.setCategory(complaintCategory);
			
			complaint = super.save(complaint);
			baseDto = complaint.toDto();

		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while saving object.", e);
		}

		return baseDto;
	}

	@Override
	public PageList<Complaint> findMyComplaint(int firstResult, int maxResults, SortDirectionEnum sortDirection,
			String sortCriterion) throws ParvanServiceException {
		
		UserInfo userInfo = CurrentContext.getCurrentUserInfo().get();
		ComplaintCriteria criteria = new ComplaintCriteria();
		criteria.setUserName(userInfo.getUserName());
		List<Complaint> compliants;
		try {
			compliants = compliantRepository.findByCriteria(criteria, firstResult, maxResults, sortDirection, sortCriterion);
			Integer total = countByCriteria(criteria);
			PageList<Complaint> result = new PageList<Complaint>(compliants, total);
			return result;
		} catch (ParvanDaoException e) {
			throw new ParvanServiceException(e);
		}
	}

}
