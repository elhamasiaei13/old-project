package com.parvanpajooh.agentmanagement.dao.jpa;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.Metamodel;

import com.parvanpajooh.agentmanagement.dao.AccountNumberDao;
import com.parvanpajooh.agentmanagement.model.AccountNumber;
import com.parvanpajooh.agentmanagement.model.AccountNumber_;
import com.parvanpajooh.agentmanagement.model.Employee;
import com.parvanpajooh.agentmanagement.model.Employee_;
import com.parvanpajooh.agentmanagement.model.GeneralAgent;
import com.parvanpajooh.agentmanagement.model.GeneralAgent_;
import com.parvanpajooh.agentmanagement.model.criteria.AccountNumberCriteria;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.commons.platform.ejb.dao.jpa.GenericDaoJpa;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanException;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseCriteria;
import com.parvanpajooh.commons.util.DateUtil;
import com.parvanpajooh.commons.util.Validator;


/**
 * 
 * @author 
 *
 */
@Stateless
public class AccountNumberDaoJpa extends GenericDaoJpa<AccountNumber, Long> implements AccountNumberDao {

	public AccountNumberDaoJpa() {
		super(AccountNumber.class);
	}
	
	@Override
	protected List<Predicate> buildPredicateList(
			BaseCriteria cri, 
			CriteriaBuilder builder, 
			Metamodel metamodel, 
			Root<AccountNumber> root, Map<String, Join> joins) throws ParvanException {

		//LOG
    	log.debug("Entering buildPredicateList( ... )");
    	
    	AccountNumberCriteria accountNumberCriteria = (AccountNumberCriteria) cri;
    	
		List<Predicate> predicateList = new ArrayList<Predicate>();
		
		String accountNumber = accountNumberCriteria.getAccountNumber();
		
		GeneralAgentVO generalAgent = accountNumberCriteria.getGeneralAgent();
		// ----------------------------------------------------------------
		// GeneralAgent
		// ----------------------------------------------------------------
		if (Validator.isNotNull(generalAgent) && Validator.isNotNull(generalAgent.getId())) {

			Join<Employee, GeneralAgent> memberJoin = root.join("generalAgent");
			if (Validator.isNotNull(generalAgent.getId())) {

				Predicate predicate = builder.equal(memberJoin.<Long> get(GeneralAgent_.id), generalAgent.getId());
				predicateList.add(predicate);
			}

		}
		// ----------------------------------------------------------------
		// accountNumber
		// ----------------------------------------------------------------
		if (Validator.isNotNull(accountNumber)) {
			Predicate predicate = builder.equal(root.<String> get(AccountNumber_.accountNumber), accountNumber);
			predicateList.add(predicate);
		}
			
		//LOG
    	log.debug("Leaving buildPredicateList(): {}", predicateList.size());
    	
    	return predicateList;
	}
	protected void basePredicate(BaseCriteria cri, CriteriaBuilder builder, Root<AccountNumber> root, List<Predicate> predicateList) {

		if (Validator.isNotNull(cri.getCreateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("createUserId"), cri.getCreateUserId());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateUserId())) {
			Predicate predicate = builder.equal(root.<String> get("updateUserId"), cri.getUpdateUserId());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getCreateDate())) {
			Predicate predicate = builder.equal(root.<LocalDateTime> get("createDate"), cri.getCreateDate());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateDate())) {
			Predicate predicate = builder.equal(root.<LocalDateTime> get("updateDate"), cri.getCreateDate());
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getCreateDateFrom())) {
			LocalDateTime localDateTime = DateUtil.getFirstTimeOfDate(cri.getCreateDateFrom());

			Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime> get("createDate"), localDateTime);
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getCreateDateTo())) {
			LocalDateTime localDateTime = DateUtil.getLastTimeOfDate(cri.getCreateDateTo());

			Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime> get("createDate"), localDateTime);
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateDateFrom())) {
			LocalDateTime localDateTime = DateUtil.getFirstTimeOfDate(cri.getUpdateDateFrom());

			Predicate predicate = builder.greaterThanOrEqualTo(root.<LocalDateTime> get("updateDate"), localDateTime);
			predicateList.add(predicate);
		}

		if (Validator.isNotNull(cri.getUpdateDateTo())) {
			LocalDateTime localDateTime = DateUtil.getLastTimeOfDate(cri.getUpdateDateTo());

			Predicate predicate = builder.lessThanOrEqualTo(root.<LocalDateTime> get("updateDate"), localDateTime);
			predicateList.add(predicate);
		}
	}
}
