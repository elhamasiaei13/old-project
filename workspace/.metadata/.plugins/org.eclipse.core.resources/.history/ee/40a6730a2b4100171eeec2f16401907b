/**
 * 
 */
package com.parvanpajooh.personmanagement.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanUnrecoverableException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseCriteria;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseVO;
import com.parvanpajooh.commons.platform.ejb.service.impl.GenericServiceImpl;
import com.parvanpajooh.personmanagement.model.Organization;
import com.parvanpajooh.personmanagement.model.vo.OrganizationVO;
import com.parvanpajooh.personmanagement.service.OrganizationLocalService;
import com.parvanpajooh.personmanagement.service.OrganizationService;

/**
 * @author MO
 *
 */
@Stateless
public class OrganizationServiceImpl extends GenericServiceImpl<Organization, Long> implements OrganizationService {

	static final Logger log = LoggerFactory.getLogger(OrganizationServiceImpl.class);

	private OrganizationLocalService organizationLocalService;

	@Inject
	public void setPersonLocalService(OrganizationLocalService localService) {
		this.localService = localService;
		this.organizationLocalService = localService;
	}


	@Override
	public List<OrganizationVO> findSubOrganizationsByParentId(UserInfo userInfo,Long parentId) throws ParvanServiceException {
		
		//LOG
		log.debug("Enterin findSubOrganizationsByParentId (UserInfo={}, parentId={})", userInfo, parentId);

		List<OrganizationVO> listVO = null;

		try {
			
			// find all sub organization by parentId
			List<Organization> list = organizationLocalService.findByParentOrg(parentId);
			Organization parentOrg = organizationLocalService.get(parentId);
			list.add(parentOrg);

			listVO = new ArrayList<OrganizationVO>(list.size());
			for (Organization organization : list) {

				OrganizationVO organizationVO = organization.toVO();

				listVO.add(organizationVO);
			}

		} catch (ParvanServiceException e) {
			throw e;

		} catch (Exception e) {
			throw new ParvanUnrecoverableException(
					"Error occurred while getting list of records by parentId.",e);
		}

		return listVO;
	}
	
}
