package com.parvanpajooh.agentmanagement.service.impl;

import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.parvanpajooh.agentmanagement.model.vo.CityInfoVO;
import com.parvanpajooh.agentmanagement.model.vo.NodeVO;
import com.parvanpajooh.agentmanagement.service.GeoManagementLocalService;
import com.parvanpajooh.agentmanagement.service.RateAndRouteLocalService;
import com.parvanpajooh.agentmanagement.service.adapter.RateAndRouteServiceAdapter;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanUnrecoverableException;

/**
 * 
 * @author
 *
 */
@Stateless
public class GeoManagementLocalServiceImpl implements GeoManagementLocalService {
	/**
	 * Log variable for all child classes.
	 */
	static final Logger log = LoggerFactory.getLogger(GeoManagementLocalServiceImpl.class);
	
	@Inject
	private RateAndRouteServiceAdapter rateAndRouteServiceAdapter;

	@Override
	public List<CityInfoVO> findCitiesByNameOrShortCode(String term, int firstResult, int maxResults, String sortDirection, String sortCriterion) throws ParvanServiceException {

		// LOG
		log.debug("Entering findCityByNameOrShortCode(term={})", term);
		List<CityInfoVO> voList = null;

		try {
			
			voList = rateAndRouteServiceAdapter.findCitiesByNameOrShortCode(term, firstResult, maxResults, sortDirection, sortCriterion);
			
		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while findCityByNameOrShortCode", e);
		}

		// LOG
		log.debug("Leaving findCityByNameOrShortCode(): ret={}", (voList != null) ? voList.size() : "NULL");
		return voList;
	}

	@Override
	public List<NodeVO> findNodesBy(String term, String cityShortCode, int firstResult, int maxResults, String sortDirection, String sortCriterion)
			throws ParvanServiceException {
		
		// LOG
		log.debug("Entering findNodesBy(term={} , cityShortCode={})", term, cityShortCode);
		List<NodeVO> voList = null;

		try {

			voList = rateAndRouteServiceAdapter.findNodesBy(term, cityShortCode, firstResult, maxResults, sortDirection, sortCriterion);

		} catch (Exception e) {
			throw new ParvanUnrecoverableException("Error occurred while findNodesBy", e);
		}

		// LOG
		log.debug("Leaving findNodesBy(): ret={}", (voList != null) ? voList.size() : "NULL");
		return voList;	
	}

	@Override
	public NodeVO getNode(Long id) throws ParvanServiceException {
		return rateAndRouteServiceAdapter.getNode(id);
	}

	@Override
	public NodeVO getNodeForInit(Long id) throws ParvanServiceException {
		return rateAndRouteServiceAdapter.getNodeForInit(id);
	}

	@Override
	public CityInfoVO getCityByShortCode(String shortCode) throws ParvanServiceException {
		
		// LOG
		log.debug("Entering getCityByShortCode(shortCode={})", shortCode);
		
		return rateAndRouteServiceAdapter.getCityByShortCode(shortCode);		
	}

}
