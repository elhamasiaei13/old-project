package com.parvanpajooh.issuemanager.mvc;

import java.util.List;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.parvanpajooh.common.UserInfo;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanDaoException;
import com.parvanpajooh.issuemanager.common.exceptions.ParvanServiceException;
import com.parvanpajooh.issuemanager.model.Member;
import com.parvanpajooh.issuemanager.model.vo.MemberVO;
import com.parvanpajooh.issuemanager.service.MemberService;

@Controller
@RequestMapping("/")
public class UserController {

	@EJB(mappedName = "java:global/issueManager-ear/issueManager-ejb/MemberServiceImpl")
	private MemberService memberService;

	@RequestMapping(value = "/showMembers", method = RequestMethod.GET)
	public String showUsers(Model model) throws ParvanServiceException {

		UserInfo userInfo = new UserInfo(1L, "userName", "firstName",
				"lastName", "ip", "context", 1L, null, null, null, null, true,
				false);

		List<MemberVO> list = memberService.loadMembers(userInfo);

		model.addAttribute("allMembers", list);
		return "showMembers";
	}

	@RequestMapping(value = "/addMember", method = RequestMethod.GET)
	public String showAddPage(Model model) throws ParvanServiceException {
		model.addAttribute("member", new Member());
		return "addMember";
	}

	@RequestMapping(value = "/addMember/addMember/save", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String addMember(@ModelAttribute Member user, Model model)
			throws ParvanServiceException, ParvanDaoException {

		UserInfo userInfo = new UserInfo(1L, "userName", "firstName",
				"lastName", "ip", "context", 1L, null, null, null, null, true,
				false);

		user.setActive(true);

		memberService.saveMember(userInfo, user);
		return "redirect:/showMembers";
	}

	@RequestMapping(value = "/removeMember", method = RequestMethod.POST)
	public String removeMember(final HttpServletRequest req)
			throws ParvanServiceException, ParvanDaoException {
		Long rowId = Long.valueOf(req.getParameter("id"));

		memberService.removeMember(rowId);
		return "redirect:/showMembers";
	}

	@RequestMapping(value = "/editMember/{id}", method = RequestMethod.GET)
	public String showEditPage(@PathVariable Long id,
			final HttpServletRequest req, Model model)
			throws ParvanServiceException, ParvanDaoException {
		// final Integer rowId = Integer.valueOf(req.getParameter("editRow"));
		UserInfo userInfo = new UserInfo(1L, "userName", "firstName",
				"lastName", "ip", "context", 1L, null, null, null, null, true,
				false);
		MemberVO member = memberService.loadMember(userInfo, id);
		model.addAttribute("member", member);
		return "editMember";
	}

	@RequestMapping(value = "/editMember/save", method = { RequestMethod.POST,
			RequestMethod.GET })
	public String editMember(@ModelAttribute Member member, Model model)
			throws ParvanServiceException, ParvanDaoException {
		member.setActive(true);
		memberService.editMember(member);
		return "redirect:/showMembers";
	}
}
