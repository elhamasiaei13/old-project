package com.parvanpajooh.taskmanagement.mvc;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.parvanpajooh.common.auth.UserInfoLoader;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.taskmanagement.application.TaskApplicationService;
import com.parvanpajooh.taskmanagement.domain.model.dto.TaskAttachmentCommandDto;
import com.parvanpajooh.taskmanagement.domain.model.dto.TaskChangeAssigneeCommandDto;
import com.parvanpajooh.taskmanagement.domain.model.dto.TaskDisplayDto;
import com.parvanpajooh.taskmanagement.mvc.base.TaskCommandAbstractController;

/**
 * @author dev-03
 *
 */
@Controller
@RequestMapping("tasks/attachments")
public class TaskAttachmentController extends TaskCommandAbstractController<TaskChangeAssigneeCommandDto> {

	private static final String REPO_PATH = "/usr/local/issuemanager/";

	@EJB(mappedName = "java:global/taskmanagement-ear/taskmanagement-ejb/TaskApplicationServiceImpl")
	private TaskApplicationService taskApplicationService;

	@Override
	protected String getName() {
		return "taskattachments";
	}

	protected SortDirectionEnum getDefaultSortDirection() {
		return SortDirectionEnum.Ascending;
	}

	protected String getDefaultSortCriterion() {
		return null;
	}

	/**
	 * 
	 * @param taskId
	 * @param file
	 * @param remarks
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> saveAttachment(String taskKey, @RequestParam("file") MultipartFile file, String remarks,
			HttpServletRequest request) {

		// LOG
		log.debug("Entering saveAttachment(taskKey={},remarks={})", taskKey, remarks);

		Map<String, Object> result = new HashMap<String, Object>();
		UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();

		try {

			TaskAttachmentCommandDto taskAttachmentCommandDto = new TaskAttachmentCommandDto();

			taskAttachmentCommandDto.setBytes(file.getBytes());
			taskAttachmentCommandDto.setName(file.getOriginalFilename());
			taskAttachmentCommandDto.setSize(file.getSize());
			taskAttachmentCommandDto.setMimeType(file.getContentType());
			taskAttachmentCommandDto.setRemarks(remarks);

			TaskDisplayDto taskDisplayDto = taskApplicationService.getTaskDisplayByTaskKey(userInfo, taskKey);
			taskApplicationService.addAttachment(userInfo, taskAttachmentCommandDto, taskDisplayDto.getTaskId());
			result.put("status", "success");

		} catch (Exception e) {
			proccessException(e, result);
		}

		// LOG
		log.debug("Leaving saveattachment()");
		return result;
	}

	/**
	 * 
	 * @param id
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "/download/{id}", method = { RequestMethod.POST, RequestMethod.GET })
	public String downlaodAttachment(@PathVariable Long id, HttpServletRequest request, HttpServletResponse response) {

		// LOG
		log.debug("Entering downlaodAttachment(id={})", id);

		FileInputStream inputStream = null;
		OutputStream outputStream = null;
		Map<String, Object> result = new HashMap<String, Object>();
		UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
		String path = null;

		try {

			TaskAttachmentCommandDto taskAttachmentCommandDto = taskApplicationService.getTaskAttachmentCommandDto(userInfo, id);

			path = taskAttachmentCommandDto.getPath();
			inputStream = new FileInputStream(REPO_PATH + path);
			outputStream = response.getOutputStream();

			IOUtils.copy(inputStream, outputStream);

		} catch (Exception e) {
			proccessException(e, result);

		} finally {
			if (inputStream != null) {
				try {
					inputStream.close();
				} catch (IOException e) {
				}
			}

			if (outputStream != null) {
				try {
					outputStream.flush();
					outputStream.close();
				} catch (IOException e) {
				}
			}
		}

		return null;
	}

}
