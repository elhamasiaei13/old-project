package com.parvanpajooh.agentmanagement.mvc;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.EJB;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.github.dandelion.datatables.core.ajax.ColumnDef;
import com.github.dandelion.datatables.core.ajax.ColumnDef.SortDirection;
import com.github.dandelion.datatables.core.ajax.DataSet;
import com.github.dandelion.datatables.core.ajax.DatatablesCriterias;
import com.github.dandelion.datatables.core.ajax.DatatablesResponse;
import com.github.dandelion.datatables.extras.spring3.ajax.DatatablesParams;
import com.parvanpajooh.agentmanagement.model.GeneralAgent;
import com.parvanpajooh.agentmanagement.model.criteria.GeneralAgentCriteria;
import com.parvanpajooh.agentmanagement.model.vo.AccountVO;
import com.parvanpajooh.agentmanagement.model.vo.CityInfoVO;
import com.parvanpajooh.agentmanagement.model.vo.EmployeeVO;
import com.parvanpajooh.agentmanagement.model.vo.GeneralAgentVO;
import com.parvanpajooh.agentmanagement.model.vo.NodeVO;
import com.parvanpajooh.agentmanagement.model.vo.PersonOrganizationVO;
import com.parvanpajooh.agentmanagement.mvc.base.AmAbstractController;
import com.parvanpajooh.agentmanagement.service.AccountingService;
import com.parvanpajooh.agentmanagement.service.GeneralAgentService;
import com.parvanpajooh.agentmanagement.service.GeoManagementService;
import com.parvanpajooh.agentmanagement.service.PersonOrganizationService;
import com.parvanpajooh.agentmanagement.service.RateAndRouteService;
import com.parvanpajooh.client.common.PageList;
import com.parvanpajooh.common.auth.UserInfoLoader;
import com.parvanpajooh.commons.config.Config;
import com.parvanpajooh.commons.enums.SortDirectionEnum;
import com.parvanpajooh.commons.platform.ejb.exceptions.ObjectNotFoundException;
import com.parvanpajooh.commons.platform.ejb.exceptions.ParvanServiceException;
import com.parvanpajooh.commons.platform.ejb.model.UserInfo;
import com.parvanpajooh.commons.platform.ejb.model.vo.BaseVO;
import com.parvanpajooh.commons.platform.ejb.service.GenericService;
import com.parvanpajooh.commons.util.Validator;

/**
 * 
 * @author
 *
 */
@Controller
@RequestMapping("/generalAgent")
public class GeneralAgentController extends AmAbstractController<GeneralAgent, GeneralAgentVO, GeneralAgentCriteria> {

	@EJB(mappedName = "java:global/agentmanagement-ear/agentmanagement-ejb/GeneralAgentServiceImpl")
	private GeneralAgentService generalAgentService;
	
	@EJB(mappedName = "java:global/agentmanagement-ear/agentmanagement-ejb/PersonOrganizationServiceImpl")
	private PersonOrganizationService personOrganizationService; 

	@EJB(mappedName = "java:global/agentmanagement-ear/agentmanagement-ejb/AccountingServiceImpl")
	private AccountingService accountingService;
	
	@EJB(mappedName = "java:global/agentmanagement-ear/agentmanagement-ejb/RateAndRouteServiceImpl")
	private RateAndRouteService rateAndRouteService;
	
	@EJB(mappedName = "java:global/agentmanagement-ear/agentmanagement-ejb/GeoManagementServiceImpl")
	private GeoManagementService geoManagementService;

	@Override
	protected GenericService<GeneralAgent, Long> getService() {
		return generalAgentService;
	}

	@Override
	protected String getName() {
		return "agents";
	}

	/**
	 * 
	 * @param id
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/{id}/employees/add", method = RequestMethod.GET)
	public String addEmployees(@PathVariable Long id, Model model,HttpServletRequest request) {
		log.debug("Entering addEmployees (generalAgentId={})", id);
		
		Map<String, Object> result = new HashMap<String, Object>();
		GeneralAgentVO agentVO = null;
		
		try {

			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			agentVO = (GeneralAgentVO) generalAgentService.get(userInfo, id);

		} catch (Exception e) {

			proccessException(e, result);
		}
		model.addAttribute("generalAgentName", agentVO.getName());
		model.addAttribute("generalAgentId", id);
		return "agent-addemployees";
	}
	
	@RequestMapping(value = "/{agentId}/logo/show", method = RequestMethod.GET)
	public String showAgentLogo(@PathVariable Long agentId, HttpServletRequest request, HttpServletResponse response) throws Exception {

		// LOG
		log.debug("showAgentLogo id {}", agentId);
		InputStream input = null;
		OutputStream output = null;
		GeneralAgentVO agentVO = null;

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			agentVO = (GeneralAgentVO) generalAgentService.get(userInfo, agentId);
			String agentsLogoPath = Config.getProperty("agentslogo", "/usr/local/ecourier/data/agentslogo");
			File basePath = new File(agentsLogoPath);
			File file = null;

			response.setContentType("image/png");
			// response.setContentLength(attachmentVO.getSize());
			if (Validator.isNotNull(agentVO.getLogoId())) {
				file = new File(basePath, agentVO.getLogoId());

				input = new FileInputStream(file);
				output = response.getOutputStream();
				byte[] buffer = new byte[1024];
				int len = input.read(buffer);
				while (len != -1) {
					output.write(buffer, 0, len);
					len = input.read(buffer);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("Error occurred while findAttachments.", e);
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (Exception e) {
					log.warn("Error occurred while close input.", e);
				}
			}
			if (output != null) {
				try {
					output.flush();
					output.close();
				} catch (Exception e) {
					log.warn("Error occurred while close output.", e);
				}
			}
		}
		return null;
	}
	
	@RequestMapping(value = "{id}/logo/delete", method = RequestMethod.GET)
	public @ResponseBody Map<String, Object> deleteLogo(@PathVariable Long id, Model model, HttpServletRequest request) {
		log.debug("Entering deleteLogo (generalAgentId={})", id);

		Map<String, Object> result = new HashMap<String, Object>();

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			//delete logoId
			generalAgentService.deleteAgentLogo(userInfo, id);
			
			result.put("status", "success");

		} catch (Exception e) {
			proccessException(e, result);
		}
		return result;
	}
	
	@RequestMapping(value = "/{id}/logo/add", method = RequestMethod.GET)
	public String addLogo(@PathVariable Long id, Model model, HttpServletRequest request) {
		log.debug("Entering addLogo (generalAgentId={})", id);

		Map<String, Object> result = new HashMap<String, Object>();
		GeneralAgentVO agentVO = null;

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			agentVO = (GeneralAgentVO) generalAgentService.get(userInfo, id);

		} catch (Exception e) {
			proccessException(e, result);
		}
		model.addAttribute("generalAgentName", agentVO.getName());
		model.addAttribute("generalAgentId", id);
		model.addAttribute("generalAgentLogoId", agentVO.getLogoId());

		return "agent-addlogo";
	}

	/**
	 * 
	 * @param id
	 * @param model
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/{id}/detail", method = RequestMethod.GET)
	public String agentDetail(@PathVariable Long id, Model model, HttpServletRequest request) {
		log.debug("Entering agentDetail (generalAgentId={})", id);
		Map<String, Object> result = new HashMap<String, Object>();
		GeneralAgentVO agentVO = null;

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			agentVO = (GeneralAgentVO) generalAgentService.get(userInfo, id);

			result.put("status", "success");
			
		} catch (Exception e) {

			proccessException(e, result);
		}
		model.addAttribute("generalAgentId", id);
		model.addAttribute("generalAgentVO", agentVO);
		return "agent-detail";
	}
	
	/**
	 * 
	 * @param agentId
	 * @param file
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "logo/save", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> saveLogo(long agentId, @RequestParam("file") MultipartFile file, HttpServletRequest request) {

		// LOG
		log.debug("Entering saveLogo(agentId={})", agentId);

		Map<String, Object> result = new HashMap<String, Object>();
		UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
		try {

			//save logo
			generalAgentService.saveAgentLogo(userInfo, agentId, file.getBytes());
			
			result.put("status", "success");

		} catch (Exception e) {
			proccessException(e, result);
		}
		return result;
	}

	/**
	 * 
	 * @param employeeVO
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/createEmployee", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> createEmployee(EmployeeVO employeeVO,String[] userUuids, HttpServletRequest request) {
		
		//LOG
		log.debug("Entering createEmployee(employeeVO={})", employeeVO);

		Map<String, Object> result = new HashMap<String, Object>();

		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			
			GeneralAgentVO agentVO = generalAgentService.attachEmployee(userInfo, employeeVO,userUuids);

			result.put("status", "success");
			result.put("result", agentVO);

		} catch (Exception e) {
			proccessException(e, result);
		}

		return result;
	}

	/**
	 * 
	 * @param criterias
	 * @param criteria
	 * @param term
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/parents/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<BaseVO> findAgents(@DatatablesParams DatatablesCriterias criterias, GeneralAgentCriteria criteria,String term, HttpServletRequest request) {
		log.debug("Entering paging(criteria={})", criteria);

		int firstResult = criterias.getStart();
		int maxResults = criterias.getLength();
		ColumnDef columnDef = criterias.getSortedColumnDefs().get(0);
		SortDirectionEnum sortDirection = getDefaultSortDirection();
		String sortCriterion = columnDef.getName();

		if ("0".equals(sortCriterion)) {
			sortCriterion = getDefaultSortCriterion();
		}

		if (columnDef.getSortDirection().equals(SortDirection.DESC)) {
			sortDirection = SortDirectionEnum.Descending;
		}
		
		criteria.setName(term);
				
		DataSet<BaseVO> dataSet;
		try {
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			List<BaseVO> rows = generalAgentService.findByCriteria(userInfo, criteria, firstResult, maxResults, sortDirection, sortCriterion);

			long totalRecords = getService().countByCriteria(userInfo, criteria);
			dataSet = new DataSet<BaseVO>(rows, (long) rows.size(), totalRecords);
		} catch (Exception e) {
			log.error("error occured in record paging...", e);
			e.printStackTrace();
			dataSet = new DataSet<BaseVO>(new ArrayList<BaseVO>(), 0l, 0l);
		}
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	/**
	 * 
	 * @param criterias
	 * @param request
	 * @param term
	 * @return
	 */
	@RequestMapping(value = "/accounts/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<AccountVO> findAccounts(@DatatablesParams DatatablesCriterias criterias, HttpServletRequest request, String term) {

		// LOG
		log.debug("Entering findAccounts()");

		List<AccountVO> accounts = new ArrayList<AccountVO>();
		UserInfo userInfo = null;
		DataSet<AccountVO> dataSet = null;

		try {

			userInfo = UserInfoLoader.getInstance().getUserInfo();

			// find accounts by their names
			accounts = accountingService.findAgentAccountsByName(userInfo, term);
			dataSet = new DataSet<AccountVO>(accounts, (long) accounts.size(), (long) accounts.size());
			
		} catch (Exception e) {
			log.error("error occured in record paging...", e);
			e.printStackTrace();
			dataSet = new DataSet<AccountVO>(new ArrayList<AccountVO>(), 0l, 0l);
		}

		// LOG
		log.debug("Leaving findAccounts(): ret={}", (accounts != null) ? accounts.size() : "NULL");
		
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	@RequestMapping(value = "/accounts/get", method = RequestMethod.GET)
	public @ResponseBody AccountVO getAccountByAccountNumber(String accountNumber, HttpServletRequest request) {
		
		//LOG
		log.debug("Entering getAccountByAccountNumber(accountNumber={})", accountNumber);
		
		AccountVO accountVO = null;

		try {
			
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();

			accountVO = accountingService.findAccountByAccountNumber(userInfo, accountNumber);

		} catch (Exception e) {
			log.error("Error occurred while getAccountByAccountNumber.", e);
		}
		
		return accountVO;
	}
	
	@RequestMapping(value = "/organizations/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<PersonOrganizationVO> findOrganization(
			@DatatablesParams DatatablesCriterias criterias, String term, HttpServletRequest request)
			throws ParvanServiceException, ObjectNotFoundException {
		log.debug("Entering findOrganization(criterias={}, term={})", criterias, term);
		DataSet<PersonOrganizationVO> dataSet = null;
		int firstResult = criterias.getStart();
		int maxResults = criterias.getLength();
		String sortCriterion = "id";
		SortDirectionEnum sortDirection = SortDirectionEnum.Ascending;
		if (Validator.isNotNull(criterias.getSortedColumnDefs())) {
			ColumnDef columnDef = criterias.getSortedColumnDefs().get(0);
			sortCriterion = columnDef.getName();
			if (columnDef.getSortDirection().equals(SortDirection.DESC)) {
				sortDirection = SortDirectionEnum.Descending;
			}
		}
		PageList<PersonOrganizationVO> result = personOrganizationService.find(UserInfoLoader.getInstance().getUserInfo(), term, firstResult,
				maxResults, sortDirection, sortCriterion);
        long totalRecords = result.getTotal();
		List<PersonOrganizationVO> elements = result.getElements();
		dataSet = new DataSet<PersonOrganizationVO>(elements, (long) elements.size(), totalRecords);
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	@RequestMapping(value = "/organizations", method = RequestMethod.GET)
	public @ResponseBody PersonOrganizationVO getOrganization(@RequestParam Long id, HttpServletRequest request) throws Exception {
		log.debug("Entering getOrganization(id={})", id);
		PersonOrganizationVO result = null;
		try {
			if (Validator.isNotNull(id)) {
				result = personOrganizationService.get(UserInfoLoader.getInstance().getUserInfo(), id);
			}
		} catch (Exception e) {
			throw e;
		}
		log.debug("Exiting getOrganization()");
		return result;
	}
	
	/**
	 * 
	 * @param criterias
	 * @param request
	 * @param term
	 * @return
	 */
	@RequestMapping(value = "/cities/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<CityInfoVO> findCitiesByNameOrShortCode(@DatatablesParams DatatablesCriterias criterias, HttpServletRequest request, String term) {

		// LOG
		log.debug("Entering findCitiesByNameOrShortCode()");

		List<CityInfoVO> voList = new ArrayList<CityInfoVO>();
		UserInfo userInfo = null;
		DataSet<CityInfoVO> dataSet = null;
		int firstResult = criterias.getStart();
		int maxResults = criterias.getLength();
		String sortDirection = getDefaultSortDirection().toString();
		String sortCriterion = "shortCode";

		try {

			userInfo = UserInfoLoader.getInstance().getUserInfo();

			// find cities by name or shortCode
			voList = rateAndRouteService.findCitiesByNameOrShortCode(userInfo,  term, firstResult,
					maxResults, sortDirection, sortCriterion);
			dataSet = new DataSet<CityInfoVO>(voList, (long) voList.size(), (long) voList.size());
			
		} catch (Exception e) {
			log.error("error occured in record paging...", e);
			e.printStackTrace();
			dataSet = new DataSet<CityInfoVO>(new ArrayList<CityInfoVO>(), 0l, 0l);
		}

		// LOG
		log.debug("Leaving findCitiesByNameOrShortCode(): ret={}", (voList != null) ? voList.size() : "NULL");
		
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	/**
	 * 
	 * @param shortCode
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/cities/get", method = RequestMethod.GET)
	public @ResponseBody CityInfoVO getCityByShortCode(String shortCode, HttpServletRequest request) {
		
		//LOG
		log.debug("Entering getCityByShortCode(shortCode={})", shortCode);
		
		CityInfoVO cityInfoVO = null;

		try {
			
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();

			cityInfoVO = rateAndRouteService.getCityByShortCode(userInfo, shortCode);

		} catch (Exception e) {
			log.error("Error occurred while getCityByShortCode.", e);
		}
		
		return cityInfoVO;
	}
	
	/**
	 * 
	 * @param criterias
	 * @param request
	 * @param term
	 * @return
	 */
	@RequestMapping(value = "/nodes/paging", method = RequestMethod.GET)
	public @ResponseBody DatatablesResponse<NodeVO> findNodesBy(@DatatablesParams DatatablesCriterias criterias, HttpServletRequest request, String term,String cityShortCode) {

		// LOG
		log.debug("Entering findNodesBy()");

		List<NodeVO> voList = new ArrayList<NodeVO>();
		UserInfo userInfo = null;
		DataSet<NodeVO> dataSet = null;
		int firstResult = criterias.getStart();
		int maxResults = criterias.getLength();
		String sortDirection = getDefaultSortDirection().toString();
		String sortCriterion = "id";

		try {

			userInfo = UserInfoLoader.getInstance().getUserInfo();

			// find nodes By cityShortCode , otherNames , name and codeName
			voList = rateAndRouteService.findNodesBy(userInfo,  term,cityShortCode, firstResult,
					maxResults, sortDirection, sortCriterion);
			dataSet = new DataSet<NodeVO>(voList, (long) voList.size(), (long) voList.size());
			
		} catch (Exception e) {
			log.error("error occured in record paging...", e);
			e.printStackTrace();
			dataSet = new DataSet<NodeVO>(new ArrayList<NodeVO>(), 0l, 0l);
		}

		// LOG
		log.debug("Leaving findNodesBy(): ret={}", (voList != null) ? voList.size() : "NULL");
		
		return DatatablesResponse.build(dataSet, criterias);
	}
	
	/**
	 * 
	 * @param id
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/nodes/get", method = RequestMethod.GET)
	public @ResponseBody NodeVO getNode(Long id, HttpServletRequest request) {
		
		//LOG
		log.debug("Entering getNode(id={})", id);
		
		NodeVO nodeVO = null;

		try {
			
			UserInfo userInfo = UserInfoLoader.getInstance().getUserInfo();
			nodeVO = rateAndRouteService.getNode(userInfo, id);

		} catch (Exception e) {
			log.error("Error occurred while getNode.", e);
		}
		
		return nodeVO;
	}
}
